[
  {
    "name": "AlertProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "comment": {
      "tags": [
        {
          "tag": "children",
          "text": "required\n"
        }
      ]
    },
    "id": "AlertProps",
    "tags": {
      "children": "required"
    },
    "properties": {
      "children": {
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        },
        "description": "The content of the component",
        "deprecated": false
      },
      "closeAriaLabel": {
        "name": "closeAriaLabel",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "The text read by screen readers for the close button",
        "defaultValue": "\"Close this message\"",
        "deprecated": false
      },
      "isDismissible": {
        "name": "isDismissible",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will be able to be dismissed and will include a close button",
        "defaultValue": "false",
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "onDismiss": {
        "name": "onDismiss",
        "required": false,
        "type": {
          "name": "function"
        },
        "description": "Action that fires when the close button is clicked (required when isDismissible is true)",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      },
      "variant": {
        "name": "variant",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "AlertVariant.danger",
            "AlertVariant.info",
            "AlertVariant.success",
            "AlertVariant.warning"
          ]
        },
        "description": "The variant of the alert, indicating its function in the UI",
        "defaultValue": "`AlertVariant.info`",
        "deprecated": false
      }
    }
  },
  {
    "name": "AlertBaseProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "AlertBaseProps",
    "tags": {},
    "properties": {
      "closeAriaLabel": {
        "name": "closeAriaLabel",
        "required": false,
        "type": {
          "name": "string"
        },
        "deprecated": false
      },
      "forceDismiss": {
        "name": "forceDismiss",
        "required": false,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "hasTimerRing": {
        "name": "hasTimerRing",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "deprecated": false
      },
      "isDismissed": {
        "name": "isDismissed",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "deprecated": false
      },
      "isDismissible": {
        "name": "isDismissible",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "deprecated": false
      },
      "isExiting": {
        "name": "isExiting",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "isPaused": {
        "name": "isPaused",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "deprecated": false
      },
      "isToast": {
        "name": "isToast",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "deprecated": false
      },
      "onDismiss": {
        "name": "onDismiss",
        "required": false,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      },
      "toastDuration": {
        "name": "toastDuration",
        "required": false,
        "type": {
          "name": "number"
        },
        "deprecated": false
      },
      "variant": {
        "name": "variant",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "AlertVariant.danger",
            "AlertVariant.info",
            "AlertVariant.success",
            "AlertVariant.warning"
          ]
        },
        "deprecated": false
      }
    }
  },
  {
    "name": "AnnounceProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "comment": {
      "tags": [
        {
          "tag": "children",
          "text": "required\n"
        }
      ]
    },
    "id": "AnnounceProps",
    "tags": {
      "children": "required"
    },
    "properties": {
      "children": {
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        },
        "description": "The content of the component",
        "deprecated": false
      },
      "politeness": {
        "name": "politeness",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "AnnouncePoliteness.assertive",
            "AnnouncePoliteness.off",
            "AnnouncePoliteness.polite"
          ]
        },
        "description": "Value of the `aria-live` attribute",
        "defaultValue": "AnnouncePoliteness.polite",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      }
    }
  },
  {
    "name": "BadgeProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "comment": {
      "tags": [
        {
          "tag": "children",
          "text": "required\n"
        }
      ]
    },
    "id": "BadgeProps",
    "tags": {
      "children": "required"
    },
    "properties": {
      "children": {
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        },
        "description": "The content of the component",
        "deprecated": false
      },
      "color": {
        "name": "color",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "BadgeColor.danger",
            "BadgeColor.light",
            "BadgeColor.primary",
            "BadgeColor.secondary",
            "BadgeColor.success"
          ]
        },
        "description": "The color variant of the badge",
        "defaultValue": "BadgeColor.primary",
        "deprecated": false
      },
      "onClick": {
        "name": "onClick",
        "required": false,
        "type": {
          "name": "function"
        },
        "description": "Action that fires when the badge is clicked. Causes the Badge to render as a button instead of a span.",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      },
      "variant": {
        "name": "variant",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "BadgeVariant.counter",
            "BadgeVariant.label"
          ]
        },
        "description": "Indicates the style variant of the component",
        "defaultValue": "BadgeVariant.label",
        "deprecated": false
      }
    }
  },
  {
    "name": "BannerProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "comment": {
      "tags": [
        {
          "tag": "children",
          "text": "required\n"
        }
      ]
    },
    "id": "BannerProps",
    "tags": {
      "children": "required"
    },
    "properties": {
      "actionButtonOnClick": {
        "name": "actionButtonOnClick",
        "required": false,
        "type": {
          "name": "function"
        },
        "description": "Action that fires when the action button is clicked. Must be present for button to appear",
        "deprecated": false
      },
      "actionButtonText": {
        "name": "actionButtonText",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "The text displayed inside of the action button",
        "deprecated": false
      },
      "children": {
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        },
        "description": "The content of the component",
        "deprecated": false
      },
      "closeAriaLabel": {
        "name": "closeAriaLabel",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "The text read by screen readers for the close button",
        "defaultValue": "\"Close this message\"",
        "deprecated": false
      },
      "isDismissible": {
        "name": "isDismissible",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will be able to be dismissed and will include a close button",
        "defaultValue": "false",
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "onDismiss": {
        "name": "onDismiss",
        "required": false,
        "type": {
          "name": "function"
        },
        "description": "Action that fires when the close button is clicked (required when isDismissible is true)",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      },
      "variant": {
        "name": "variant",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "AlertVariant.danger",
            "AlertVariant.info",
            "AlertVariant.success",
            "AlertVariant.warning"
          ]
        },
        "description": "The variant of the alert, indicating its function in the UI",
        "defaultValue": "`AlertVariant.info`",
        "deprecated": false
      }
    }
  },
  {
    "name": "BreadcrumbItemProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "comment": {
      "tags": [
        {
          "tag": "children",
          "text": "required\n"
        }
      ]
    },
    "id": "BreadcrumbItemProps",
    "tags": {
      "children": "required"
    },
    "properties": {
      "children": {
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        },
        "description": "The content of the component",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      },
      "to": {
        "name": "to",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "The href value of the link. If left blank, the breadcrumb item will render as a span with aria-current=\"page\" on it.",
        "deprecated": false
      }
    }
  },
  {
    "name": "BreadCrumbContextInterface",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "BreadCrumbContextInterface",
    "tags": {},
    "properties": {
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      }
    }
  },
  {
    "name": "BreadcrumbProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "comment": {
      "tags": [
        {
          "tag": "children",
          "text": "required\n"
        }
      ]
    },
    "id": "BreadcrumbProps",
    "tags": {
      "children": "required"
    },
    "properties": {
      "children": {
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        },
        "description": "The content of the component",
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      }
    }
  },
  {
    "name": "BreakpointProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "BreakpointProps",
    "tags": {},
    "properties": {
      "screenSize": {
        "name": "screenSize",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "BreakpointScreenSize.large",
            "BreakpointScreenSize.medium",
            "BreakpointScreenSize.small",
            "BreakpointScreenSize.xl",
            "BreakpointScreenSize.xs"
          ]
        },
        "description": "The relative screen size for the breakpoint. Will go from pixel width specified up to the next breakpoint.",
        "defaultValue": "BreakpointScreenSize.xs",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      }
    }
  },
  {
    "name": "BreakpointsContainerProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "comment": {
      "tags": [
        {
          "tag": "children",
          "text": "required\n"
        }
      ]
    },
    "id": "BreakpointsContainerProps",
    "tags": {
      "children": "required"
    },
    "properties": {
      "breakpoints": {
        "name": "breakpoints",
        "required": false,
        "type": {
          "name": "object"
        },
        "description": "Object that defines the pixel size of individual breakpoints",
        "defaultValue": "{ xs: 0, small: 600, medium: 768, large: 1024, xl: 1200 }",
        "deprecated": false
      },
      "children": {
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        },
        "description": "The content of the component",
        "deprecated": false
      }
    }
  },
  {
    "name": "BaseButtonProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {},
    "comment": {
      "tags": [
        {
          "tag": "children",
          "text": "required\n"
        }
      ]
    },
    "id": "BaseButtonProps",
    "tags": {
      "children": "required"
    },
    "properties": {
      "children": {
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        },
        "description": "The content of the component",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      },
      "type": {
        "name": "type",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "ButtonType.button",
            "ButtonType.reset",
            "ButtonType.submit"
          ]
        },
        "description": "The type attribute of the button\nButtonType.button",
        "deprecated": false
      }
    }
  },
  {
    "name": "ButtonStyles",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "ButtonStyles",
    "tags": {},
    "properties": {
      "color": {
        "name": "color",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "ButtonColor.danger",
            "ButtonColor.marketing",
            "ButtonColor.primary",
            "ButtonColor.secondary",
            "ButtonColor.success"
          ]
        },
        "description": "The color of the button, indicating its function in the UI",
        "defaultValue": "ButtonColor.primary",
        "deprecated": false
      },
      "isFullWidth": {
        "name": "isFullWidth",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": " Set the button to display full-width.",
        "defaultValue": "false",
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "shape": {
        "name": "shape",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "ButtonShape.fill",
            "ButtonShape.leftCap",
            "ButtonShape.rightCap",
            "ButtonShape.round"
          ]
        },
        "description": "Defines the border radius",
        "defaultValue": "ButtonShape.fill",
        "deprecated": false
      },
      "size": {
        "name": "size",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "ButtonSize.large",
            "ButtonSize.medium",
            "ButtonSize.small"
          ]
        },
        "description": "The relative size of the button",
        "defaultValue": "ButtonSize.medium",
        "deprecated": false
      },
      "textTransform": {
        "name": "textTransform",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "ButtonTextTransform.none",
            "ButtonTextTransform.uppercase"
          ]
        },
        "description": "Determines whether the button appears in all-caps",
        "defaultValue": "ButtonTextTransform.uppercase",
        "deprecated": false
      },
      "variant": {
        "name": "variant",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "ButtonVariant.link",
            "ButtonVariant.outline",
            "ButtonVariant.solid"
          ]
        },
        "description": "The variant of the button",
        "defaultValue": "ButtonVariant.solid",
        "deprecated": false
      }
    }
  },
  {
    "name": "ButtonProps",
    "kind": 4194304,
    "kindString": "Type alias",
    "flags": {
      "isExported": true
    },
    "type": {
      "type": "intersection",
      "types": [
        {
          "type": "reference",
          "id": 367,
          "name": "BaseButtonProps"
        },
        {
          "type": "reference",
          "id": 359,
          "name": "ButtonStyles"
        }
      ]
    },
    "id": "ButtonProps",
    "properties": {
      "color": {
        "name": "color",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "ButtonColor.danger",
            "ButtonColor.marketing",
            "ButtonColor.primary",
            "ButtonColor.secondary",
            "ButtonColor.success"
          ]
        },
        "description": "The color of the button, indicating its function in the UI",
        "defaultValue": "ButtonColor.primary",
        "deprecated": false
      },
      "isFullWidth": {
        "name": "isFullWidth",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": " Set the button to display full-width.",
        "defaultValue": "false",
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "shape": {
        "name": "shape",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "ButtonShape.fill",
            "ButtonShape.leftCap",
            "ButtonShape.rightCap",
            "ButtonShape.round"
          ]
        },
        "description": "Defines the border radius",
        "defaultValue": "ButtonShape.fill",
        "deprecated": false
      },
      "size": {
        "name": "size",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "ButtonSize.large",
            "ButtonSize.medium",
            "ButtonSize.small"
          ]
        },
        "description": "The relative size of the button",
        "defaultValue": "ButtonSize.medium",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      },
      "textTransform": {
        "name": "textTransform",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "ButtonTextTransform.none",
            "ButtonTextTransform.uppercase"
          ]
        },
        "description": "Determines whether the button appears in all-caps",
        "defaultValue": "ButtonTextTransform.uppercase",
        "deprecated": false
      },
      "type": {
        "name": "type",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "ButtonType.button",
            "ButtonType.reset",
            "ButtonType.submit"
          ]
        },
        "description": "The type attribute of the button\nButtonType.button",
        "deprecated": false
      },
      "variant": {
        "name": "variant",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "ButtonVariant.link",
            "ButtonVariant.outline",
            "ButtonVariant.solid"
          ]
        },
        "description": "The variant of the button",
        "defaultValue": "ButtonVariant.solid",
        "deprecated": false
      }
    }
  },
  {
    "name": "CardBodyProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "comment": {
      "tags": [
        {
          "tag": "children",
          "text": "required\n"
        }
      ]
    },
    "id": "CardBodyProps",
    "tags": {
      "children": "required"
    },
    "properties": {
      "children": {
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        },
        "description": "The content of the component",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      }
    }
  },
  {
    "name": "CardHeadingProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "comment": {
      "tags": [
        {
          "tag": "children",
          "text": "required\n"
        }
      ]
    },
    "id": "CardHeadingProps",
    "tags": {
      "children": "required"
    },
    "properties": {
      "children": {
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        },
        "description": "The content of the component",
        "deprecated": false
      },
      "headingLevel": {
        "name": "headingLevel",
        "required": false,
        "type": {
          "name": "1 | 2 | 3 | 4 | 5 | 6"
        },
        "description": "Number to indicate which level heading will render (e.g. h1, h2 etc.)",
        "defaultValue": "4",
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      }
    }
  },
  {
    "name": "CardProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "comment": {
      "tags": [
        {
          "tag": "children",
          "text": "required\n"
        }
      ]
    },
    "id": "CardProps",
    "tags": {
      "children": "required"
    },
    "properties": {
      "align": {
        "name": "align",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "CardAlignment.center",
            "CardAlignment.left",
            "CardAlignment.right"
          ]
        },
        "description": "Sets the alignment of the card content",
        "defaultValue": "CardAlignment.left",
        "deprecated": false
      },
      "background": {
        "name": "background",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Color for the background and border-color, set by CSS.",
        "deprecated": false
      },
      "calloutType": {
        "name": "calloutType",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "CardCalloutType.danger",
            "CardCalloutType.primary",
            "CardCalloutType.success",
            "CardCalloutType.warning"
          ]
        },
        "description": "If a value is passed, the card will be styled as a callout for the specified type.",
        "defaultValue": "none",
        "deprecated": false
      },
      "children": {
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        },
        "description": "The content of the component",
        "deprecated": false
      },
      "hasDropShadow": {
        "name": "hasDropShadow",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, card will render with a box-shadow",
        "defaultValue": "false",
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      },
      "width": {
        "name": "width",
        "required": false,
        "type": {
          "name": "string | number"
        },
        "description": "Width of the component, set by CSS.",
        "deprecated": false
      }
    }
  },
  {
    "name": "NavTabsContextInterface",
    "kind": 256,
    "kindString": "Interface",
    "flags": {},
    "id": "NavTabsContextInterface",
    "tags": {},
    "properties": {
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      }
    }
  },
  {
    "name": "CheckboxProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "CheckboxProps",
    "tags": {},
    "properties": {
      "checked": {
        "name": "checked",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, element is checked (i.e. selected)",
        "defaultValue": "false",
        "deprecated": false
      },
      "color": {
        "name": "color",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Hex code for the background color",
        "defaultValue": "#0000FF",
        "deprecated": false
      },
      "containerStyle": {
        "name": "containerStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the component container element",
        "deprecated": false
      },
      "defaultChecked": {
        "name": "defaultChecked",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, checkbox is checked on first render",
        "deprecated": false
      },
      "disabled": {
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, element is disabled",
        "defaultValue": "false",
        "deprecated": false
      },
      "errorMessage": {
        "name": "errorMessage",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        },
        "description": "Content of the error message for an individual checkbox. If a value is provided, the input will be styled as an error state and the error message will display.",
        "deprecated": false
      },
      "hasError": {
        "name": "hasError",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "deprecated": false
      },
      "inputStyle": {
        "name": "inputStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the checkbox element",
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "isTextVisuallyHidden": {
        "name": "isTextVisuallyHidden",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, label text will be hidden visually, but will still be read by assistive technology",
        "defaultValue": "false",
        "deprecated": false
      },
      "labelStyle": {
        "name": "labelStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the label element",
        "deprecated": false
      },
      "labelText": {
        "name": "labelText",
        "required": true,
        "type": {
          "name": "React.ReactNode"
        },
        "description": "Content of label; can be node or string",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      },
      "textPosition": {
        "name": "textPosition",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "CheckboxTextPosition.left",
            "CheckboxTextPosition.right"
          ]
        },
        "description": "Whether the label appears to the left of the right of the checkbox",
        "defaultValue": "CheckboxTextPosition.right",
        "deprecated": false
      }
    }
  },
  {
    "name": "ComboboxInputProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {},
    "typeParameter": [
      {
        "id": 7593,
        "name": "T",
        "kind": 131072,
        "kindString": "Type parameter",
        "flags": {}
      }
    ],
    "id": "ComboboxInputProps",
    "tags": {},
    "properties": {
      "ariaDescribedBy": {
        "name": "ariaDescribedBy",
        "required": false,
        "type": {
          "name": "string"
        },
        "deprecated": false
      },
      "children": {
        "name": "children",
        "required": false,
        "type": {
          "name": "React.ReactNode | "
        },
        "description": "The content of the component",
        "deprecated": false
      },
      "customComponents": {
        "name": "customComponents",
        "required": false,
        "type": {
          "name": "SelectComponents"
        },
        "deprecated": false
      },
      "disabled": {
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "deprecated": false
      },
      "getComboboxProps": {
        "name": "getComboboxProps",
        "required": true,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "getInputProps": {
        "name": "getInputProps",
        "required": true,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "getToggleButtonProps": {
        "name": "getToggleButtonProps",
        "required": true,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "hasError": {
        "name": "hasError",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "deprecated": false
      },
      "innerRef": {
        "name": "innerRef",
        "required": false,
        "type": {
          "name": "React.Ref"
        },
        "deprecated": false
      },
      "inputStyle": {
        "name": "inputStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "isLoading": {
        "name": "isLoading",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "deprecated": false
      },
      "onInputBlur": {
        "name": "onInputBlur",
        "required": false,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "onInputFocus": {
        "name": "onInputFocus",
        "required": false,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "onInputKeyDown": {
        "name": "onInputKeyDown",
        "required": false,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "onInputKeyPress": {
        "name": "onInputKeyPress",
        "required": false,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "onInputKeyUp": {
        "name": "onInputKeyUp",
        "required": false,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "placeholder": {
        "name": "placeholder",
        "required": false,
        "type": {
          "name": "string"
        },
        "deprecated": false
      },
      "selectedItems": {
        "name": "selectedItems",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        },
        "deprecated": false
      },
      "toggleButtonRef": {
        "name": "toggleButtonRef",
        "required": false,
        "type": {
          "name": "React.Ref"
        },
        "deprecated": false
      }
    }
  },
  {
    "name": "ComboboxProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "typeParameter": [
      {
        "id": 7682,
        "name": "T",
        "kind": 131072,
        "kindString": "Type parameter",
        "flags": {
          "isExported": true
        },
        "type": {
          "type": "reference",
          "id": 7522,
          "name": "SelectOptions"
        }
      }
    ],
    "id": "ComboboxProps",
    "tags": {},
    "properties": {
      "ariaDescribedBy": {
        "name": "ariaDescribedBy",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Id of the element that describes the combobox input",
        "deprecated": false
      },
      "components": {
        "name": "components",
        "required": false,
        "type": {
          "name": "SelectComponents"
        },
        "description": "This complex object includes all the compositional components that are used. If you wish to overwrite a component, pass in a component to the appropriate namespace",
        "deprecated": false
      },
      "containerStyle": {
        "name": "containerStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the component container",
        "deprecated": false
      },
      "defaultItems": {
        "name": "defaultItems",
        "required": false,
        "type": {
          "name": "Generic[]"
        },
        "description": "Default selectable options. Allows for uncontrolled component and internal creation of items. Can be an array of strings or objects",
        "deprecated": false
      },
      "disableCreateItem": {
        "name": "disableCreateItem",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the new items cannot be created by typing in the text field",
        "defaultValue": "false",
        "deprecated": false
      },
      "disabled": {
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, item will be disabled; it will appear dimmed and events will not fire",
        "defaultValue": "false",
        "deprecated": false
      },
      "errorMessage": {
        "name": "errorMessage",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        },
        "description": "Content of the error message. If a value is provided, the component will be styled to show an error state",
        "deprecated": false
      },
      "helperMessage": {
        "name": "helperMessage",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        },
        "description": "Content of the helper message",
        "deprecated": false
      },
      "innerRef": {
        "name": "innerRef",
        "required": false,
        "type": {
          "name": "React.Ref"
        },
        "description": "Reference to the input element in the combobox",
        "deprecated": false
      },
      "inputStyle": {
        "name": "inputStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the select trigger or combobox input",
        "deprecated": false
      },
      "isClearable": {
        "name": "isClearable",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component include a button for clearing the field",
        "defaultValue": "false",
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "isLabelVisuallyHidden": {
        "name": "isLabelVisuallyHidden",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, label text will be hidden visually, but will still be read by assistive technology",
        "defaultValue": "false",
        "deprecated": false
      },
      "isLoading": {
        "name": "isLoading",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the loading component is shown",
        "defaultValue": "false",
        "deprecated": false
      },
      "isMulti": {
        "name": "isMulti",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, multiple items may be selected",
        "defaultValue": "false",
        "deprecated": false
      },
      "itemListMaxHeight": {
        "name": "itemListMaxHeight",
        "required": false,
        "type": {
          "name": "number | string"
        },
        "description": "Max-height for the item menu list ul element",
        "deprecated": false
      },
      "items": {
        "name": "items",
        "required": false,
        "type": {
          "name": "Generic[]"
        },
        "description": "Default selectable options. Can be an array of strings or objects",
        "deprecated": false
      },
      "labelStyle": {
        "name": "labelStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the label",
        "deprecated": false
      },
      "labelText": {
        "name": "labelText",
        "required": true,
        "type": {
          "name": "string"
        },
        "description": "Text for label",
        "deprecated": false
      },
      "menuStyle": {
        "name": "menuStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the items menu",
        "deprecated": false
      },
      "messageStyle": {
        "name": "messageStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the helper or error message",
        "deprecated": false
      },
      "newItemTransform": {
        "name": "newItemTransform",
        "required": false,
        "type": {
          "name": "function"
        },
        "description": "Function passed in that transforms a newly created item to whatever format your items are in",
        "deprecated": false
      },
      "onInputBlur": {
        "name": "onInputBlur",
        "required": false,
        "type": {
          "name": "function"
        },
        "description": "Event that fires when the input loses focus",
        "deprecated": false
      },
      "onInputChange": {
        "name": "onInputChange",
        "required": false,
        "type": {
          "name": "function"
        },
        "description": "Event that fires when the input's value is changed",
        "deprecated": false
      },
      "onInputFocus": {
        "name": "onInputFocus",
        "required": false,
        "type": {
          "name": "function"
        },
        "description": "Event that fires when the input gains focus",
        "deprecated": false
      },
      "onInputKeyDown": {
        "name": "onInputKeyDown",
        "required": false,
        "type": {
          "name": "function"
        },
        "description": "Event that will fire when input receives keypress.",
        "deprecated": false
      },
      "onInputKeyPress": {
        "name": "onInputKeyPress",
        "required": false,
        "type": {
          "name": "function"
        },
        "description": "Event that will fire when a character is typed in the input",
        "deprecated": false
      },
      "onInputKeyUp": {
        "name": "onInputKeyUp",
        "required": false,
        "type": {
          "name": "function"
        },
        "description": "Event that will fire when a keypress is released on the input",
        "deprecated": false
      },
      "onInputValueChange": {
        "name": "onInputValueChange",
        "required": false,
        "type": {
          "name": "function"
        },
        "description": "Event that fires when the selected item changes",
        "deprecated": false
      },
      "onItemCreated": {
        "name": "onItemCreated",
        "required": false,
        "type": {
          "name": "function"
        },
        "description": "Event that fires when a new item is created with the create item option is clicked in the item list menu",
        "deprecated": false
      },
      "placeholder": {
        "name": "placeholder",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Text for select trigger button or combobox input placeholder",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      },
      "toggleButtonRef": {
        "name": "toggleButtonRef",
        "required": false,
        "type": {
          "name": "React.Ref"
        },
        "description": "Reference to the toggle button element wrapping the input in the combobox",
        "deprecated": false
      }
    }
  },
  {
    "name": "MultiComboboxProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "typeParameter": [
      {
        "id": 7750,
        "name": "T",
        "kind": 131072,
        "kindString": "Type parameter",
        "flags": {
          "isExported": true
        },
        "type": {
          "type": "reference",
          "id": 7522,
          "name": "SelectOptions"
        }
      }
    ],
    "id": "MultiComboboxProps",
    "tags": {},
    "properties": {
      "activeIndex": {
        "name": "activeIndex",
        "required": false,
        "type": {
          "name": "number"
        },
        "deprecated": false
      },
      "defaultActiveIndex": {
        "name": "defaultActiveIndex",
        "required": false,
        "type": {
          "name": "number"
        },
        "deprecated": false
      },
      "defaultSelectedItems": {
        "name": "defaultSelectedItems",
        "required": false,
        "type": {
          "name": "Generic[]"
        },
        "deprecated": false
      },
      "environment": {
        "name": "environment",
        "required": false,
        "type": {
          "name": "Environment"
        },
        "deprecated": false
      },
      "getA11yRemovalMessage": {
        "name": "getA11yRemovalMessage",
        "required": false,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "initialActiveIndex": {
        "name": "initialActiveIndex",
        "required": false,
        "type": {
          "name": "number"
        },
        "deprecated": false
      },
      "initialSelectedItems": {
        "name": "initialSelectedItems",
        "required": false,
        "type": {
          "name": "Generic[]"
        },
        "deprecated": false
      },
      "itemToString": {
        "name": "itemToString",
        "required": false,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "keyNavigationNext": {
        "name": "keyNavigationNext",
        "required": false,
        "type": {
          "name": "string"
        },
        "deprecated": false
      },
      "keyNavigationPrevious": {
        "name": "keyNavigationPrevious",
        "required": false,
        "type": {
          "name": "string"
        },
        "deprecated": false
      },
      "onActiveIndexChange": {
        "name": "onActiveIndexChange",
        "required": false,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "onRemoveSelectedItem": {
        "name": "onRemoveSelectedItem",
        "required": false,
        "type": {
          "name": "function"
        },
        "description": "Event that fires when the clear button is clicked on a multi-selected item",
        "deprecated": false
      },
      "onSelectedItemsChange": {
        "name": "onSelectedItemsChange",
        "required": false,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "onStateChange": {
        "name": "onStateChange",
        "required": false,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "selectedItems": {
        "name": "selectedItems",
        "required": false,
        "type": {
          "name": "Generic[]"
        },
        "deprecated": false
      },
      "stateReducer": {
        "name": "stateReducer",
        "required": false,
        "type": {
          "name": "function"
        },
        "deprecated": false
      }
    }
  },
  {
    "name": "CalendarContextInterface",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "CalendarContextInterface",
    "tags": {},
    "properties": {
      "buildCalendarMonth": {
        "name": "buildCalendarMonth",
        "required": true,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "chosenDate": {
        "name": "chosenDate",
        "required": true,
        "type": {
          "name": "Date"
        },
        "deprecated": false
      },
      "dateFocused": {
        "name": "dateFocused",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "deprecated": false
      },
      "focusedDate": {
        "name": "focusedDate",
        "required": true,
        "type": {
          "name": "Date"
        },
        "deprecated": false
      },
      "maxDate": {
        "name": "maxDate",
        "required": false,
        "type": {
          "name": "Date"
        },
        "deprecated": false
      },
      "minDate": {
        "name": "minDate",
        "required": false,
        "type": {
          "name": "Date"
        },
        "deprecated": false
      },
      "onDateChange": {
        "name": "onDateChange",
        "required": true,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "onKeyDown": {
        "name": "onKeyDown",
        "required": true,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "onNextMonthClick": {
        "name": "onNextMonthClick",
        "required": true,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "onPrevMonthClick": {
        "name": "onPrevMonthClick",
        "required": true,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "setDateFocused": {
        "name": "setDateFocused",
        "required": true,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "setShowHelperInformation": {
        "name": "setShowHelperInformation",
        "required": true,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "showHelperInformation": {
        "name": "showHelperInformation",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "deprecated": false
      }
    }
  },
  {
    "name": "CalendarDayProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {},
    "id": "CalendarDayProps",
    "tags": {},
    "properties": {
      "day": {
        "name": "day",
        "required": true,
        "type": {
          "name": "Date"
        },
        "deprecated": false
      },
      "dayFocusable": {
        "name": "dayFocusable",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "deprecated": false
      },
      "onDateChange": {
        "name": "onDateChange",
        "required": false,
        "type": {
          "name": "function"
        },
        "deprecated": false
      }
    }
  },
  {
    "name": "CalendarHeaderProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {},
    "id": "CalendarHeaderProps",
    "tags": {},
    "properties": {
      "focusHeader": {
        "name": "focusHeader",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "deprecated": false
      }
    }
  },
  {
    "name": "CalendarMonthProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {},
    "id": "CalendarMonthProps",
    "tags": {},
    "properties": {
      "calendarOpened": {
        "name": "calendarOpened",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "deprecated": false
      },
      "focusOnOpen": {
        "name": "focusOnOpen",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "deprecated": false
      },
      "handleCloseButtonClick": {
        "name": "handleCloseButtonClick",
        "required": true,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "setDateFocused": {
        "name": "setDateFocused",
        "required": false,
        "type": {
          "name": "function"
        },
        "deprecated": false
      }
    }
  },
  {
    "name": "HelperInformationProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {},
    "id": "HelperInformationProps",
    "tags": {},
    "properties": {
      "isOpen": {
        "name": "isOpen",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "deprecated": false
      },
      "onClose": {
        "name": "onClose",
        "required": false,
        "type": {
          "name": "function"
        },
        "deprecated": false
      }
    }
  },
  {
    "name": "DatePickerProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "DatePickerProps",
    "tags": {},
    "properties": {
      "containerStyle": {
        "name": "containerStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the component container element",
        "deprecated": false
      },
      "defaultDate": {
        "name": "defaultDate",
        "required": false,
        "type": {
          "name": "Date"
        },
        "description": "Default selected date value",
        "deprecated": false
      },
      "errorMessage": {
        "name": "errorMessage",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        },
        "description": "Content of the error message. If a value is provided, the component will be styled to show an error state",
        "deprecated": false
      },
      "helperMessage": {
        "name": "helperMessage",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        },
        "description": "Content of the helper message",
        "deprecated": false
      },
      "inputStyle": {
        "name": "inputStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the input element",
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "labelStyle": {
        "name": "labelStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the label element",
        "deprecated": false
      },
      "labelText": {
        "name": "labelText",
        "required": true,
        "type": {
          "name": "React.ReactNode"
        },
        "description": "Text for label",
        "deprecated": false
      },
      "maxDate": {
        "name": "maxDate",
        "required": false,
        "type": {
          "name": "Date"
        },
        "description": "Maximum date allowed to be chosen in the calendar",
        "deprecated": false
      },
      "messageStyle": {
        "name": "messageStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the helper or error message",
        "deprecated": false
      },
      "minDate": {
        "name": "minDate",
        "required": false,
        "type": {
          "name": "Date"
        },
        "description": "Minimum date allowed to be chosen in the calendar",
        "deprecated": false
      },
      "onChange": {
        "name": "onChange",
        "required": false,
        "type": {
          "name": "function"
        },
        "description": "Event fired in multiple instances when internal values are changed and can be used as a generic state change event",
        "deprecated": false
      },
      "onDateChange": {
        "name": "onDateChange",
        "required": false,
        "type": {
          "name": "function"
        },
        "description": "Event that will fire when day is changed",
        "deprecated": false
      },
      "onInputBlur": {
        "name": "onInputBlur",
        "required": false,
        "type": {
          "name": "function"
        },
        "description": "Event that will fire when the text input loses focus",
        "deprecated": false
      },
      "onInputChange": {
        "name": "onInputChange",
        "required": false,
        "type": {
          "name": "function"
        },
        "description": "Event that will fire when the text input is changed",
        "deprecated": false
      },
      "onInputFocus": {
        "name": "onInputFocus",
        "required": false,
        "type": {
          "name": "function"
        },
        "description": "Event that will fire when the text input gains focus",
        "deprecated": false
      },
      "placeholder": {
        "name": "placeholder",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Text for input placeholder",
        "deprecated": false
      },
      "required": {
        "name": "required",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, this component must have a value",
        "defaultValue": "false",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      },
      "value": {
        "name": "value",
        "required": false,
        "type": {
          "name": "Date"
        },
        "description": "Value of the date input, used when setting the date value externally",
        "deprecated": false
      }
    }
  },
  {
    "name": "IconOnlyDropdownButtonProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "IconOnlyDropdownButtonProps",
    "tags": {},
    "properties": {
      "aria-label": {
        "name": "aria-label",
        "required": true,
        "type": {
          "name": "string"
        },
        "description": "The text the screen reader will announce. Required for icon-only buttons",
        "deprecated": false
      },
      "icon": {
        "name": "icon",
        "required": false,
        "type": {
          "name": "ReactElement"
        },
        "description": "Icon to display within the component",
        "deprecated": false
      }
    }
  },
  {
    "name": "IconTextDropdownButtonProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "IconTextDropdownButtonProps",
    "tags": {},
    "properties": {
      "children": {
        "name": "children",
        "required": true,
        "type": {
          "name": "React.ReactChild | "
        },
        "description": "The content of the component",
        "deprecated": false
      },
      "icon": {
        "name": "icon",
        "required": false,
        "type": {
          "name": "ReactElement"
        },
        "description": "Icon to display within the component",
        "deprecated": false
      },
      "iconPosition": {
        "name": "iconPosition",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "ButtonIconPosition.left",
            "ButtonIconPosition.right"
          ]
        },
        "description": "Position within the button for the icon to appear",
        "defaultValue": "`ButtonIconPosition.right`",
        "deprecated": false
      },
      "isFullWidth": {
        "name": "isFullWidth",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": " Set the button to display full-width.",
        "defaultValue": "false",
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "shape": {
        "name": "shape",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "ButtonShape.fill",
            "ButtonShape.leftCap",
            "ButtonShape.rightCap",
            "ButtonShape.round"
          ]
        },
        "description": "Defines the border radius",
        "defaultValue": "ButtonShape.fill",
        "deprecated": false
      },
      "size": {
        "name": "size",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "ButtonSize.large",
            "ButtonSize.medium",
            "ButtonSize.small"
          ]
        },
        "description": "The relative size of the button",
        "defaultValue": "ButtonSize.medium",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      },
      "textTransform": {
        "name": "textTransform",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "ButtonTextTransform.none",
            "ButtonTextTransform.uppercase"
          ]
        },
        "description": "Determines whether the button appears in all-caps",
        "defaultValue": "ButtonTextTransform.uppercase",
        "deprecated": false
      },
      "type": {
        "name": "type",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "ButtonType.button",
            "ButtonType.reset",
            "ButtonType.submit"
          ]
        },
        "description": "The type attribute of the button\nButtonType.button",
        "deprecated": false
      },
      "variant": {
        "name": "variant",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "ButtonVariant.link",
            "ButtonVariant.outline",
            "ButtonVariant.solid"
          ]
        },
        "description": "The variant of the button",
        "defaultValue": "ButtonVariant.solid",
        "deprecated": false
      }
    }
  },
  {
    "name": "DropdownButtonProps",
    "kind": 4194304,
    "kindString": "Type alias",
    "flags": {
      "isExported": true
    },
    "type": {
      "type": "reference",
      "typeArguments": [
        {
          "type": "reference",
          "id": 8920,
          "name": "IconOnlyDropdownButtonProps"
        },
        {
          "type": "reference",
          "id": 8924,
          "name": "IconTextDropdownButtonProps"
        }
      ],
      "name": "XOR"
    },
    "id": "DropdownButtonProps",
    "tags": {},
    "properties": {}
  },
  {
    "name": "DropdownContentProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "comment": {
      "tags": [
        {
          "tag": "children",
          "text": "required\n"
        }
      ]
    },
    "id": "DropdownContentProps",
    "tags": {
      "children": "required"
    },
    "properties": {
      "children": {
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        },
        "description": "The content of the component",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      }
    }
  },
  {
    "name": "DropdownDividerProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "DropdownDividerProps",
    "tags": {},
    "properties": {
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      }
    }
  },
  {
    "name": "DropdownHeaderProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "comment": {
      "tags": [
        {
          "tag": "children",
          "text": "required\n"
        }
      ]
    },
    "id": "DropdownHeaderProps",
    "tags": {
      "children": "required"
    },
    "properties": {
      "children": {
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        },
        "description": "The content of the component",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      }
    }
  },
  {
    "name": "DropdownMenuGroupProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "comment": {
      "tags": [
        {
          "tag": "children",
          "text": "required\n"
        }
      ]
    },
    "id": "DropdownMenuGroupProps",
    "tags": {
      "children": "required"
    },
    "properties": {
      "children": {
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        },
        "description": "The content of the component",
        "deprecated": false
      },
      "header": {
        "name": "header",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        },
        "description": "Header text to use for the menu group",
        "deprecated": false
      }
    }
  },
  {
    "name": "DropdownMenuItemProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "DropdownMenuItemProps",
    "tags": {},
    "properties": {
      "disabled": {
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, item will be disabled; it will appear dimmed and onClick event (or any other events) will not fire",
        "defaultValue": "false",
        "deprecated": false
      },
      "icon": {
        "name": "icon",
        "required": false,
        "type": {
          "name": "ReactElement"
        },
        "description": "Leading icon for the menu item",
        "deprecated": false
      },
      "onClick": {
        "name": "onClick",
        "required": false,
        "type": {
          "name": "function"
        },
        "description": "Action that fires when the menu item is clicked. If the menuitem also has a value prop, the value will be passed to the onClick handler",
        "deprecated": false
      },
      "value": {
        "name": "value",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Value of the component, gets passed to the onClick event",
        "deprecated": false
      }
    }
  },
  {
    "name": "DropdownSplitButtonProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "DropdownSplitButtonProps",
    "tags": {},
    "properties": {
      "aria-label": {
        "name": "aria-label",
        "required": true,
        "type": {
          "name": "string"
        },
        "description": "The text the screen reader will announce. Required for icon-only buttons",
        "deprecated": false
      },
      "children": {
        "name": "children",
        "required": false,
        "type": {
          "name": "any"
        },
        "description": "The content of the component. If no children are provided, the button will render in an icon only style",
        "deprecated": false
      },
      "color": {
        "name": "color",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "ButtonColor.danger",
            "ButtonColor.marketing",
            "ButtonColor.primary",
            "ButtonColor.secondary",
            "ButtonColor.success"
          ]
        },
        "description": "The color of the button, indicating its function in the UI",
        "defaultValue": "ButtonColor.primary",
        "deprecated": false
      },
      "disabled": {
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, element is disabled",
        "deprecated": false
      },
      "id": {
        "name": "id",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Icon to display within the component",
        "deprecated": false
      },
      "isFullWidth": {
        "name": "isFullWidth",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": " Set the button to display full-width.",
        "defaultValue": "false",
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "onClick": {
        "name": "onClick",
        "required": false,
        "type": {
          "name": "function"
        },
        "description": "Function that fires when the button is clicked",
        "deprecated": false
      },
      "shape": {
        "name": "shape",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "ButtonShape.fill",
            "ButtonShape.leftCap",
            "ButtonShape.rightCap",
            "ButtonShape.round"
          ]
        },
        "description": "Defines the border radius",
        "defaultValue": "ButtonShape.fill",
        "deprecated": false
      },
      "size": {
        "name": "size",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "ButtonSize.large",
            "ButtonSize.medium",
            "ButtonSize.small"
          ]
        },
        "description": "The relative size of the button",
        "defaultValue": "ButtonSize.medium",
        "deprecated": false
      },
      "textTransform": {
        "name": "textTransform",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "ButtonTextTransform.none",
            "ButtonTextTransform.uppercase"
          ]
        },
        "description": "Determines whether the button appears in all-caps",
        "defaultValue": "ButtonTextTransform.uppercase",
        "deprecated": false
      },
      "variant": {
        "name": "variant",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "ButtonVariant.link",
            "ButtonVariant.outline",
            "ButtonVariant.solid"
          ]
        },
        "description": "The variant of the button",
        "defaultValue": "ButtonVariant.solid",
        "deprecated": false
      }
    }
  },
  {
    "name": "DropdownContextInterface",
    "kind": 256,
    "kindString": "Interface",
    "flags": {},
    "id": "DropdownContextInterface",
    "tags": {},
    "properties": {
      "activeItemIndex": {
        "name": "activeItemIndex",
        "required": false,
        "type": {
          "name": "number"
        },
        "deprecated": false
      },
      "alignment": {
        "name": "alignment",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "DropdownAlignment.end",
            "DropdownAlignment.start"
          ]
        },
        "deprecated": false
      },
      "closeDropdown": {
        "name": "closeDropdown",
        "required": false,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "dropDirection": {
        "name": "dropDirection",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "DropdownDropDirection.down",
            "DropdownDropDirection.left",
            "DropdownDropDirection.right",
            "DropdownDropDirection.up"
          ]
        },
        "deprecated": false
      },
      "dropdownButtonId": {
        "name": "dropdownButtonId",
        "required": false,
        "type": {
          "name": "MutableRefObject"
        },
        "deprecated": false
      },
      "handleButtonKeyDown": {
        "name": "handleButtonKeyDown",
        "required": false,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "handleMenuBlur": {
        "name": "handleMenuBlur",
        "required": false,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "isFixedWidth": {
        "name": "isFixedWidth",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "deprecated": false
      },
      "isOpen": {
        "name": "isOpen",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "deprecated": false
      },
      "itemRefArray": {
        "name": "itemRefArray",
        "required": false,
        "type": {
          "name": "MutableRefObject"
        },
        "deprecated": false
      },
      "maxHeight": {
        "name": "maxHeight",
        "required": false,
        "type": {
          "name": "string"
        },
        "deprecated": false
      },
      "menuRef": {
        "name": "menuRef",
        "required": false,
        "type": {
          "name": "any"
        },
        "deprecated": false
      },
      "openDropdown": {
        "name": "openDropdown",
        "required": false,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "registerDropdownMenuItem": {
        "name": "registerDropdownMenuItem",
        "required": true,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "setActiveItemIndex": {
        "name": "setActiveItemIndex",
        "required": false,
        "type": {
          "name": "React.Dispatch"
        },
        "deprecated": false
      },
      "setIsOpen": {
        "name": "setIsOpen",
        "required": true,
        "type": {
          "name": "React.Dispatch"
        },
        "deprecated": false
      },
      "toggleRef": {
        "name": "toggleRef",
        "required": false,
        "type": {
          "name": "any"
        },
        "deprecated": false
      },
      "width": {
        "name": "width",
        "required": false,
        "type": {
          "name": "string"
        },
        "deprecated": false
      }
    }
  },
  {
    "name": "DropdownProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "DropdownProps",
    "tags": {},
    "properties": {
      "activeIndex": {
        "name": "activeIndex",
        "required": false,
        "type": {
          "name": "number"
        },
        "description": "Index of the item that will active/selected. If none is provided, no item will appear active",
        "defaultValue": "-1",
        "deprecated": false
      },
      "alignment": {
        "name": "alignment",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "DropdownAlignment.end",
            "DropdownAlignment.start"
          ]
        },
        "description": "Alignment of the dropdown content",
        "defaultValue": "`DropdownAlignment.start`",
        "deprecated": false
      },
      "dropDirection": {
        "name": "dropDirection",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "DropdownDropDirection.down",
            "DropdownDropDirection.left",
            "DropdownDropDirection.right",
            "DropdownDropDirection.up"
          ]
        },
        "description": "Position of the dropdown content",
        "defaultValue": "`DropdownDropDirection.down`",
        "deprecated": false
      },
      "maxHeight": {
        "name": "maxHeight",
        "required": false,
        "type": {
          "name": "string | number"
        },
        "description": "Max-height of dropdown content",
        "defaultValue": "250px",
        "deprecated": false
      },
      "onBeforeShiftFocus": {
        "name": "onBeforeShiftFocus",
        "required": false,
        "type": {
          "name": "function"
        },
        "description": "Function called on dropdown close before focusing the toggle button",
        "deprecated": true
      },
      "onClose": {
        "name": "onClose",
        "required": false,
        "type": {
          "name": "function"
        },
        "description": "Function called when closing the dropdown menu",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      },
      "width": {
        "name": "width",
        "required": false,
        "type": {
          "name": "string | number"
        },
        "description": "Width of menu",
        "defaultValue": "Width of longest menu item",
        "deprecated": false
      }
    }
  },
  {
    "name": "FormGroupContextInterface",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "FormGroupContextInterface",
    "tags": {},
    "properties": {
      "descriptionId": {
        "name": "descriptionId",
        "required": false,
        "type": {
          "name": "string"
        },
        "deprecated": false
      },
      "hasError": {
        "name": "hasError",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      }
    }
  },
  {
    "name": "FormGroupProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "comment": {
      "tags": [
        {
          "tag": "children",
          "text": "required\n"
        }
      ]
    },
    "id": "FormGroupProps",
    "tags": {
      "children": "required"
    },
    "properties": {
      "children": {
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        },
        "description": "The content of the component",
        "deprecated": false
      },
      "containerStyle": {
        "name": "containerStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the component container element",
        "deprecated": false
      },
      "errorMessage": {
        "name": "errorMessage",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        },
        "description": "Content of the error message. If a value is provided, the form fields will be styled to show an error state",
        "deprecated": false
      },
      "helperMessage": {
        "name": "helperMessage",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        },
        "description": "Content of the helper message",
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "isTextVisuallyHidden": {
        "name": "isTextVisuallyHidden",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, label text for the form group will be hidden visually, but will still be read by assistive technology",
        "defaultValue": "false",
        "deprecated": false
      },
      "labelStyle": {
        "name": "labelStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the label of the form group",
        "deprecated": false
      },
      "labelText": {
        "name": "labelText",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        },
        "description": "Content of label for form group; can be a node or a string. Alternatively, the labelledById prop can be used",
        "deprecated": false
      },
      "labelledById": {
        "name": "labelledById",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "ID of the element that labels the form group, used in the aria-labelledby attribute for the group. Alternatively, the labelText prop can be used",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      }
    }
  },
  {
    "name": "HeadingProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "comment": {
      "tags": [
        {
          "tag": "children",
          "text": "required\n"
        }
      ]
    },
    "id": "HeadingProps",
    "tags": {
      "children": "required"
    },
    "properties": {
      "children": {
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        },
        "description": "The content of the component",
        "deprecated": false
      },
      "color": {
        "name": "color",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "TypographyColor.danger",
            "TypographyColor.default",
            "TypographyColor.subdued",
            "TypographyColor.success"
          ]
        },
        "description": "The color of the component, that helps to convey meaning or relative emphasis",
        "defaultValue": "TypographyColor.default",
        "deprecated": false
      },
      "contextVariant": {
        "name": "contextVariant",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "TypographyContextVariant.default",
            "TypographyContextVariant.expressive",
            "TypographyContextVariant.narrative"
          ]
        },
        "description": "Additional styles for typography based on the context of the content",
        "defaultValue": "TypographyColor.default",
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "level": {
        "name": "level",
        "required": true,
        "type": {
          "name": "1 | 2 | 3 | 4 | 5 | 6"
        },
        "description": "Number to indicate which level heading will render (e.g. h1, h2 etc.)",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      },
      "visualStyle": {
        "name": "visualStyle",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "TypographyVisualStyle.bodyLarge",
            "TypographyVisualStyle.bodyMedium",
            "TypographyVisualStyle.bodySmall",
            "TypographyVisualStyle.bodyXSmall",
            "TypographyVisualStyle.heading2XSmall",
            "TypographyVisualStyle.headingLarge",
            "TypographyVisualStyle.headingMedium",
            "TypographyVisualStyle.headingSmall",
            "TypographyVisualStyle.headingXLarge",
            "TypographyVisualStyle.headingXSmall"
          ]
        },
        "description": "Applies visual styles including font-size, font-weight, line-height and margins",
        "deprecated": false
      }
    }
  },
  {
    "name": "HideAtBreakpointProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "comment": {
      "tags": [
        {
          "tag": "children",
          "text": "required\n"
        }
      ]
    },
    "id": "HideAtBreakpointProps",
    "tags": {
      "children": "required"
    },
    "properties": {
      "children": {
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        },
        "description": "The content of the component",
        "deprecated": false
      },
      "maxWidth": {
        "name": "maxWidth",
        "required": false,
        "type": {
          "name": "number"
        },
        "description": "Maximum width at which to hide the content",
        "deprecated": false
      },
      "minWidth": {
        "name": "minWidth",
        "required": false,
        "type": {
          "name": "number"
        },
        "description": "Minimum width at which to hide the content",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      }
    }
  },
  {
    "name": "HyperlinkProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "comment": {
      "tags": [
        {
          "tag": "children",
          "text": "required\n"
        }
      ]
    },
    "id": "HyperlinkProps",
    "tags": {
      "children": "required"
    },
    "properties": {
      "children": {
        "name": "children",
        "required": true,
        "type": {
          "name": "React.ReactNode"
        },
        "description": "The content of the component",
        "deprecated": false
      },
      "color": {
        "name": "color",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "ButtonColor.danger",
            "ButtonColor.marketing",
            "ButtonColor.primary",
            "ButtonColor.secondary",
            "ButtonColor.success"
          ]
        },
        "description": "The color of the button, indicating its function in the UI",
        "defaultValue": "ButtonColor.primary",
        "deprecated": false
      },
      "isFullWidth": {
        "name": "isFullWidth",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": " Set the button to display full-width.",
        "defaultValue": "false",
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "shape": {
        "name": "shape",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "ButtonShape.fill",
            "ButtonShape.leftCap",
            "ButtonShape.rightCap",
            "ButtonShape.round"
          ]
        },
        "description": "Defines the border radius",
        "defaultValue": "ButtonShape.fill",
        "deprecated": false
      },
      "size": {
        "name": "size",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "ButtonSize.large",
            "ButtonSize.medium",
            "ButtonSize.small"
          ]
        },
        "description": "The relative size of the button",
        "defaultValue": "ButtonSize.medium",
        "deprecated": false
      },
      "styledAs": {
        "name": "styledAs",
        "required": false,
        "type": {
          "name": " | "
        },
        "description": "How the hyperlink is styled (can look like either a plain link or a button)",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      },
      "textTransform": {
        "name": "textTransform",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "ButtonTextTransform.none",
            "ButtonTextTransform.uppercase"
          ]
        },
        "description": "Determines whether the button appears in all-caps",
        "defaultValue": "ButtonTextTransform.uppercase",
        "deprecated": false
      },
      "to": {
        "name": "to",
        "required": true,
        "type": {
          "name": "string"
        },
        "description": "The href value of the link",
        "deprecated": false
      },
      "variant": {
        "name": "variant",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "ButtonVariant.link",
            "ButtonVariant.outline",
            "ButtonVariant.solid"
          ]
        },
        "description": "The variant of the button",
        "defaultValue": "ButtonVariant.solid",
        "deprecated": false
      }
    }
  },
  {
    "name": "IconOnlyButtonProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "IconOnlyButtonProps",
    "tags": {},
    "properties": {
      "aria-label": {
        "name": "aria-label",
        "required": true,
        "type": {
          "name": "string"
        },
        "description": "The text the screen reader will announce. Required for icon-only buttons",
        "deprecated": false
      },
      "icon": {
        "name": "icon",
        "required": true,
        "type": {
          "name": "ReactElement"
        },
        "description": "Icon to display within the component",
        "deprecated": false
      }
    }
  },
  {
    "name": "IconTextButtonProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "IconTextButtonProps",
    "tags": {},
    "properties": {
      "children": {
        "name": "children",
        "required": true,
        "type": {
          "name": "React.ReactChild | "
        },
        "description": "The content of the component",
        "deprecated": false
      },
      "icon": {
        "name": "icon",
        "required": true,
        "type": {
          "name": "ReactElement"
        },
        "description": "Icon to display within the component",
        "deprecated": false
      },
      "iconPosition": {
        "name": "iconPosition",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "ButtonIconPosition.left",
            "ButtonIconPosition.right"
          ]
        },
        "description": "Position within the button for the icon to appear",
        "defaultValue": "ButtonIconPosition.right",
        "deprecated": false
      },
      "isFullWidth": {
        "name": "isFullWidth",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": " Set the button to display full-width.",
        "defaultValue": "false",
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "shape": {
        "name": "shape",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "ButtonShape.fill",
            "ButtonShape.leftCap",
            "ButtonShape.rightCap",
            "ButtonShape.round"
          ]
        },
        "description": "Defines the border radius",
        "defaultValue": "ButtonShape.fill",
        "deprecated": false
      },
      "size": {
        "name": "size",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "ButtonSize.large",
            "ButtonSize.medium",
            "ButtonSize.small"
          ]
        },
        "description": "The relative size of the button",
        "defaultValue": "ButtonSize.medium",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      },
      "textTransform": {
        "name": "textTransform",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "ButtonTextTransform.none",
            "ButtonTextTransform.uppercase"
          ]
        },
        "description": "Determines whether the button appears in all-caps",
        "defaultValue": "ButtonTextTransform.uppercase",
        "deprecated": false
      },
      "type": {
        "name": "type",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "ButtonType.button",
            "ButtonType.reset",
            "ButtonType.submit"
          ]
        },
        "description": "The type attribute of the button\nButtonType.button",
        "deprecated": false
      },
      "variant": {
        "name": "variant",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "ButtonVariant.link",
            "ButtonVariant.outline",
            "ButtonVariant.solid"
          ]
        },
        "description": "The variant of the button",
        "defaultValue": "ButtonVariant.solid",
        "deprecated": false
      }
    }
  },
  {
    "name": "SpanProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "SpanProps",
    "tags": {},
    "properties": {
      "size": {
        "name": "size",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "ButtonSize.large",
            "ButtonSize.medium",
            "ButtonSize.small"
          ]
        },
        "deprecated": false
      }
    }
  },
  {
    "name": "IconButtonProps",
    "kind": 4194304,
    "kindString": "Type alias",
    "flags": {
      "isExported": true
    },
    "type": {
      "type": "reference",
      "typeArguments": [
        {
          "type": "reference",
          "id": 644,
          "name": "IconOnlyButtonProps"
        },
        {
          "type": "reference",
          "id": 648,
          "name": "IconTextButtonProps"
        }
      ],
      "name": "XOR"
    },
    "id": "IconButtonProps",
    "tags": {},
    "properties": {}
  },
  {
    "name": "IndeterminateCheckboxProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "IndeterminateCheckboxProps",
    "tags": {},
    "properties": {
      "status": {
        "name": "status",
        "required": true,
        "type": {
          "name": "enum",
          "options": [
            "IndeterminateCheckboxStatus.checked",
            "IndeterminateCheckboxStatus.indeterminate",
            "IndeterminateCheckboxStatus.unchecked"
          ]
        },
        "description": "Status of the indeterminate, three-state checkbox, which includes and indeterminate (e.g. mixed) option.",
        "defaultValue": "IndeterminateCheckboxStatus.unchecked",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      }
    }
  },
  {
    "name": "InputMessageProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "InputMessageProps",
    "tags": {},
    "properties": {
      "hasError": {
        "name": "hasError",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "deprecated": false
      },
      "id": {
        "name": "id",
        "required": false,
        "type": {
          "name": "string"
        },
        "deprecated": false
      },
      "inputSize": {
        "name": "inputSize",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "InputSize.large",
            "InputSize.medium"
          ]
        },
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      }
    }
  },
  {
    "name": "InputProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "InputProps",
    "tags": {},
    "properties": {
      "errorMessage": {
        "name": "errorMessage",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        },
        "description": "Content of the error message. If a value is provided, the input will be styled as an error state and the error message will display.",
        "deprecated": false
      },
      "helperMessage": {
        "name": "helperMessage",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        },
        "description": "Content of the helper message.",
        "deprecated": false
      },
      "isLabelVisuallyHidden": {
        "name": "isLabelVisuallyHidden",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, label text will be hidden visually, but will still be read by assistive technology",
        "defaultValue": "false",
        "deprecated": false
      },
      "labelStyle": {
        "name": "labelStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the label element",
        "deprecated": false
      },
      "labelText": {
        "name": "labelText",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        },
        "description": "Content for label; can be a node or a string",
        "deprecated": false
      },
      "messageStyle": {
        "name": "messageStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the helper or error message",
        "deprecated": false
      }
    }
  },
  {
    "name": "InputBaseProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "InputBaseProps",
    "tags": {},
    "properties": {
      "containerStyle": {
        "name": "containerStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the component container element",
        "deprecated": false
      },
      "icon": {
        "name": "icon",
        "required": false,
        "type": {
          "name": "ReactElement"
        },
        "description": "Icon to display within the component",
        "deprecated": false
      },
      "iconAriaLabel": {
        "name": "iconAriaLabel",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Text for the aria-label attribute for an icon, if provided",
        "deprecated": false
      },
      "iconPosition": {
        "name": "iconPosition",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "InputIconPosition.left",
            "InputIconPosition.right"
          ]
        },
        "description": "Position within the component for the icon to appear",
        "defaultValue": "InputIconPosition.right",
        "deprecated": false
      },
      "iconRef": {
        "name": "iconRef",
        "required": false,
        "type": {
          "name": "React.Ref"
        },
        "description": "Reference to the icon element",
        "deprecated": false
      },
      "inputSize": {
        "name": "inputSize",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "InputSize.large",
            "InputSize.medium"
          ]
        },
        "description": "Relative size of the component",
        "defaultValue": "InputSize.medium",
        "deprecated": false
      },
      "inputStyle": {
        "name": "inputStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the input element",
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "onIconClick": {
        "name": "onIconClick",
        "required": false,
        "type": {
          "name": "function"
        },
        "description": "Action that will fire when icon is clicked",
        "deprecated": false
      },
      "onIconKeyDown": {
        "name": "onIconKeyDown",
        "required": false,
        "type": {
          "name": "function"
        },
        "description": "Action that will fire when icon receives keypress",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      },
      "type": {
        "name": "type",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "InputType.email",
            "InputType.number",
            "InputType.password",
            "InputType.search",
            "InputType.text"
          ]
        },
        "description": "The type attribute of the form field",
        "defaultValue": "InputType.text",
        "deprecated": false
      }
    }
  },
  {
    "name": "LabelProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "LabelProps",
    "tags": {},
    "properties": {
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "size": {
        "name": "size",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "InputSize.large",
            "InputSize.medium"
          ]
        },
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      },
      "theme": {
        "name": "theme",
        "required": false,
        "type": {
          "name": "any"
        },
        "deprecated": false
      }
    }
  },
  {
    "name": "LoadingIndicatorProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "LoadingIndicatorProps",
    "tags": {},
    "properties": {
      "message1": {
        "name": "message1",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Message displayed for the first five seconds",
        "defaultValue": "\"Loading...\"",
        "deprecated": false
      },
      "message2": {
        "name": "message2",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Message displayed for the first five seconds",
        "defaultValue": "\"Thank you for your patience. Still loading...\"",
        "deprecated": false
      },
      "message3": {
        "name": "message3",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Message displayed after 15 seconds",
        "defaultValue": "\"Sorry for the delay. This is taking longer than expected.\"",
        "deprecated": false
      },
      "percentage": {
        "name": "percentage",
        "required": false,
        "type": {
          "name": "number"
        },
        "description": "Message displayed for the first five seconds",
        "defaultValue": "0",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      },
      "type": {
        "name": "type",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "LoadingIndicatorType.progressbar",
            "LoadingIndicatorType.spinner"
          ]
        },
        "description": "Type of loading indictor to display, can be progress bar or spinner",
        "defaultValue": "LoadingIndicatorType.spinner",
        "deprecated": false
      }
    }
  },
  {
    "name": "LoadingIndicatorState",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "LoadingIndicatorState",
    "tags": {},
    "properties": {
      "messageLevel": {
        "name": "messageLevel",
        "required": true,
        "type": {
          "name": "number"
        },
        "deprecated": false
      }
    }
  },
  {
    "name": "ModalProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "comment": {
      "tags": [
        {
          "tag": "children",
          "text": "required\n"
        }
      ]
    },
    "id": "ModalProps",
    "tags": {
      "children": "required"
    },
    "properties": {
      "children": {
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        },
        "description": "The content of the component",
        "deprecated": false
      },
      "closeAriaLabel": {
        "name": "closeAriaLabel",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "The text read by screen readers for the close button",
        "defaultValue": "\"Close dialog\"",
        "deprecated": false
      },
      "header": {
        "name": "header",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        },
        "description": "The content of the modal header",
        "deprecated": false
      },
      "isBackgroundClickDisabled": {
        "name": "isBackgroundClickDisabled",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, clicking the backdrop will not dismiss the modal",
        "defaultValue": "false",
        "deprecated": false
      },
      "isCloseButtonHidden": {
        "name": "isCloseButtonHidden",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the close button the the modal will be suppressed",
        "defaultValue": "false",
        "deprecated": false
      },
      "isEscKeyDownDisabled": {
        "name": "isEscKeyDownDisabled",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, pressing the Escape key will not dismiss the modal",
        "deprecated": false
      },
      "isOpen": {
        "name": "isOpen",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the modal will be visible",
        "defaultValue": "false",
        "deprecated": false
      },
      "onClose": {
        "name": "onClose",
        "required": false,
        "type": {
          "name": "function"
        },
        "description": "Action that fires when the close button is clicked",
        "deprecated": false
      },
      "onEscKeyDown": {
        "name": "onEscKeyDown",
        "required": false,
        "type": {
          "name": "function"
        },
        "description": "Action that fires when the Escape key is pressed",
        "deprecated": false
      },
      "size": {
        "name": "size",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "ModalSize.large",
            "ModalSize.medium",
            "ModalSize.small"
          ]
        },
        "description": "The relative size of the modal",
        "defaultValue": "ModalSize.medium",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      }
    }
  },
  {
    "name": "BaseNavTabProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "comment": {
      "tags": [
        {
          "tag": "children",
          "text": "required\n"
        }
      ]
    },
    "id": "BaseNavTabProps",
    "tags": {
      "children": "required"
    },
    "properties": {
      "children": {
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        },
        "description": "The content of the component",
        "deprecated": false
      },
      "icon": {
        "name": "icon",
        "required": false,
        "type": {
          "name": "ReactElement | "
        },
        "description": "Icon to display within the component",
        "deprecated": false
      },
      "isActive": {
        "name": "isActive",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will display with the active/selected state",
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "orientation": {
        "name": "orientation",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "TabsOrientation.horizontal",
            "TabsOrientation.vertical"
          ]
        },
        "description": "Determines if the tabs are displayed vertically or horizontally",
        "defaultValue": "TabsOrientation.horizontal",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      }
    }
  },
  {
    "name": "NavTabChildrenProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "NavTabChildrenProps",
    "tags": {},
    "properties": {
      "children": {
        "name": "children",
        "required": true,
        "type": {
          "name": "Element | string"
        },
        "description": "The content of the component",
        "deprecated": false
      },
      "icon": {
        "name": "icon",
        "required": false,
        "type": {
          "name": "ReactElement | "
        },
        "description": "Icon to display within the component",
        "deprecated": false
      },
      "isActive": {
        "name": "isActive",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will display with the active/selected state",
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "orientation": {
        "name": "orientation",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "TabsOrientation.horizontal",
            "TabsOrientation.vertical"
          ]
        },
        "description": "Determines if the tabs are displayed vertically or horizontally",
        "defaultValue": "TabsOrientation.horizontal",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      },
      "to": {
        "name": "to",
        "required": true,
        "type": {
          "name": "string"
        },
        "description": "The href value of the tab link",
        "deprecated": false
      }
    }
  },
  {
    "name": "NavTabComponentProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "NavTabComponentProps",
    "tags": {},
    "properties": {
      "component": {
        "name": "component",
        "required": true,
        "type": {
          "name": "React.ReactNode"
        },
        "description": "The prop for custom component instead of `a` in NavTab.",
        "deprecated": false
      },
      "icon": {
        "name": "icon",
        "required": false,
        "type": {
          "name": "ReactElement | "
        },
        "description": "Icon to display within the component",
        "deprecated": false
      },
      "iconPosition": {
        "name": "iconPosition",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "TabsIconPosition.bottom",
            "TabsIconPosition.left",
            "TabsIconPosition.right",
            "TabsIconPosition.top"
          ]
        },
        "description": "The orientation of icon on NavTab",
        "deprecated": false
      },
      "isActive": {
        "name": "isActive",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will display with the active/selected state",
        "deprecated": false
      },
      "isFullWidth": {
        "name": "isFullWidth",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the tab will take up the full width of its container",
        "defaultValue": "false",
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "orientation": {
        "name": "orientation",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "TabsOrientation.horizontal",
            "TabsOrientation.vertical"
          ]
        },
        "description": "Determines if the tabs are displayed vertically or horizontally",
        "defaultValue": "TabsOrientation.horizontal",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      }
    }
  },
  {
    "name": "NavTabProps",
    "kind": 4194304,
    "kindString": "Type alias",
    "flags": {
      "isExported": true
    },
    "type": {
      "type": "reference",
      "typeArguments": [
        {
          "type": "reference",
          "id": 12113,
          "name": "NavTabChildrenProps"
        },
        {
          "type": "reference",
          "id": 12378,
          "name": "NavTabComponentProps"
        }
      ],
      "name": "XOR"
    },
    "id": "NavTabProps",
    "tags": {},
    "properties": {}
  },
  {
    "name": "NavTabsContextInterface",
    "kind": 256,
    "kindString": "Interface",
    "flags": {},
    "id": "NavTabsContextInterface",
    "tags": {},
    "properties": {
      "borderPosition": {
        "name": "borderPosition",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "TabsBorderPosition.bottom",
            "TabsBorderPosition.left",
            "TabsBorderPosition.right",
            "TabsBorderPosition.top"
          ]
        },
        "deprecated": false
      },
      "iconPosition": {
        "name": "iconPosition",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "TabsIconPosition.bottom",
            "TabsIconPosition.left",
            "TabsIconPosition.right",
            "TabsIconPosition.top"
          ]
        },
        "deprecated": false
      },
      "isFullWidth": {
        "name": "isFullWidth",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "orientation": {
        "name": "orientation",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "TabsOrientation.horizontal",
            "TabsOrientation.vertical"
          ]
        },
        "deprecated": false
      }
    }
  },
  {
    "name": "NavTabsProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "NavTabsProps",
    "tags": {},
    "properties": {}
  },
  {
    "name": "ParagraphProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "comment": {
      "tags": [
        {
          "tag": "children",
          "text": "required\n"
        }
      ]
    },
    "id": "ParagraphProps",
    "tags": {
      "children": "required"
    },
    "properties": {
      "children": {
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        },
        "description": "The content of the component",
        "deprecated": false
      },
      "color": {
        "name": "color",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "TypographyColor.danger",
            "TypographyColor.default",
            "TypographyColor.subdued",
            "TypographyColor.success"
          ]
        },
        "description": "The color of the component, helping to convey meaning or relative emphasis",
        "defaultValue": "TypographyColor.default",
        "deprecated": false
      },
      "contextVariant": {
        "name": "contextVariant",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "TypographyContextVariant.default",
            "TypographyContextVariant.expressive",
            "TypographyContextVariant.narrative"
          ]
        },
        "description": "Additional styles for typography based on the context of the content",
        "defaultValue": "TypographyContextVariant.default",
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "noMargins": {
        "name": "noMargins",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will not have the default top and bottom margin and instead will a margin value of 0",
        "defaultValue": "false",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      },
      "visualStyle": {
        "name": "visualStyle",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "TypographyVisualStyle.bodyLarge",
            "TypographyVisualStyle.bodyMedium",
            "TypographyVisualStyle.bodySmall",
            "TypographyVisualStyle.bodyXSmall",
            "TypographyVisualStyle.heading2XSmall",
            "TypographyVisualStyle.headingLarge",
            "TypographyVisualStyle.headingMedium",
            "TypographyVisualStyle.headingSmall",
            "TypographyVisualStyle.headingXLarge",
            "TypographyVisualStyle.headingXSmall"
          ]
        },
        "description": "Applies visual styles including font-size, font-weight, line-height and margins",
        "defaultValue": "TypographyVisualStyle.bodyMedium",
        "deprecated": false
      }
    }
  },
  {
    "name": "PasswordInputProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "PasswordInputProps",
    "tags": {},
    "properties": {
      "containerStyle": {
        "name": "containerStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the component container element",
        "deprecated": false
      },
      "errorMessage": {
        "name": "errorMessage",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        },
        "description": "Content of the error message. If a value is provided, the input will be styled as an error state and the error message will display",
        "deprecated": false
      },
      "helperMessage": {
        "name": "helperMessage",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        },
        "description": "Content of the helper message",
        "deprecated": false
      },
      "hiddenPasswordAnnounceText": {
        "name": "hiddenPasswordAnnounceText",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Text read by screen reader when the password is hidden",
        "defaultValue": "\"Password is now hidden\"",
        "deprecated": false
      },
      "hidePasswordButtonAriaLabel": {
        "name": "hidePasswordButtonAriaLabel",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Aria-label for the \"Hide Password\" button",
        "defaultValue": "\"Hide password\"",
        "deprecated": false
      },
      "hidePasswordButtonText": {
        "name": "hidePasswordButtonText",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Text displayed on screen for the \"Hide Password\" button",
        "defaultValue": "\"Hide\"",
        "deprecated": false
      },
      "inputSize": {
        "name": "inputSize",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "InputSize.large",
            "InputSize.medium"
          ]
        },
        "description": "Relative size of the component",
        "defaultValue": "InputSize.medium",
        "deprecated": false
      },
      "inputStyle": {
        "name": "inputStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the input element",
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "isLabelVisuallyHidden": {
        "name": "isLabelVisuallyHidden",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, label text will be hidden visually, but will still be read by assistive technology",
        "defaultValue": "false",
        "deprecated": false
      },
      "isPasswordMaskButtonHidden": {
        "name": "isPasswordMaskButtonHidden",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, label text will be hidden visually, but will still be read by assistive technology",
        "defaultValue": "false",
        "deprecated": false
      },
      "labelStyle": {
        "name": "labelStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the label element",
        "deprecated": false
      },
      "labelText": {
        "name": "labelText",
        "required": true,
        "type": {
          "name": "React.ReactNode"
        },
        "description": "Content of label; can be a node or a string",
        "deprecated": false
      },
      "messageStyle": {
        "name": "messageStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the helper or error message",
        "deprecated": false
      },
      "showPasswordButtonAriaLabel": {
        "name": "showPasswordButtonAriaLabel",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Aria-label for the \"Show Password\" button",
        "defaultValue": "\"Show password. Note: this will visually expose your password on the screen\"",
        "deprecated": false
      },
      "showPasswordButtonText": {
        "name": "showPasswordButtonText",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Text displayed on screen for the \"Show Password\" button",
        "defaultValue": "\"Show\"",
        "deprecated": false
      },
      "shownPasswordAnnounceText": {
        "name": "shownPasswordAnnounceText",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Text read by screen reader when the password is hidden",
        "defaultValue": "\"Password is now hidden\"",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      }
    }
  },
  {
    "name": "ProgressBarProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "ProgressBarProps",
    "tags": {},
    "properties": {
      "color": {
        "name": "color",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "ProgressBarColor.danger",
            "ProgressBarColor.pop",
            "ProgressBarColor.pop02",
            "ProgressBarColor.primary",
            "ProgressBarColor.success"
          ]
        },
        "description": "The color variant of the progress bar",
        "defaultValue": "ProgressBarColor.primary",
        "deprecated": false
      },
      "height": {
        "name": "height",
        "required": false,
        "type": {
          "name": "number | string"
        },
        "description": "The height of the progress bar. Can be a string or number; if number is provided height is in px",
        "defaultValue": "16",
        "deprecated": false
      },
      "isAnimated": {
        "name": "isAnimated",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the progress bar with have a shimmer animation",
        "defaultValue": "false",
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "isLabelVisible": {
        "name": "isLabelVisible",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the label with the percentage value will display to the right of the progress bar",
        "defaultValue": "false",
        "deprecated": false
      },
      "percentage": {
        "name": "percentage",
        "required": false,
        "type": {
          "name": "number"
        },
        "description": "The percentage of which the bar is filled",
        "defaultValue": "0",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      }
    }
  },
  {
    "name": "ProgressRingProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "ProgressRingProps",
    "tags": {},
    "properties": {
      "color": {
        "name": "color",
        "required": false,
        "type": {
          "name": "string"
        },
        "deprecated": false
      },
      "duration": {
        "name": "duration",
        "required": false,
        "type": {
          "name": "number"
        },
        "deprecated": false
      },
      "isActive": {
        "name": "isActive",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "deprecated": false
      },
      "percentage": {
        "name": "percentage",
        "required": false,
        "type": {
          "name": "number"
        },
        "deprecated": false
      },
      "radius": {
        "name": "radius",
        "required": false,
        "type": {
          "name": "number"
        },
        "deprecated": false
      },
      "strokeWidth": {
        "name": "strokeWidth",
        "required": false,
        "type": {
          "name": "number"
        },
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      }
    }
  },
  {
    "name": "RadioProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "RadioProps",
    "tags": {},
    "properties": {
      "color": {
        "name": "color",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Hex code for the background color",
        "defaultValue": "#0000FF",
        "deprecated": false
      },
      "containerStyle": {
        "name": "containerStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the component container element",
        "deprecated": false
      },
      "inputStyle": {
        "name": "inputStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the radio button element",
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "isTextVisuallyHidden": {
        "name": "isTextVisuallyHidden",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, label text will be hidden visually, but will still be read by assistive technology",
        "defaultValue": "false",
        "deprecated": false
      },
      "labelStyle": {
        "name": "labelStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the label element",
        "deprecated": false
      },
      "labelText": {
        "name": "labelText",
        "required": true,
        "type": {
          "name": "React.ReactNode"
        },
        "description": "Content of label; can be node or string",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      },
      "textPosition": {
        "name": "textPosition",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "RadioTextPosition.left",
            "RadioTextPosition.right"
          ]
        },
        "description": "Whether the label appears to the left of the right of the radio button",
        "defaultValue": "RadioTextPosition.right",
        "deprecated": false
      }
    }
  },
  {
    "name": "RadioContextInterface",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "RadioContextInterface",
    "tags": {},
    "properties": {
      "descriptionId": {
        "name": "descriptionId",
        "required": false,
        "type": {
          "name": "string"
        },
        "deprecated": false
      },
      "hasError": {
        "name": "hasError",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "name": {
        "name": "name",
        "required": true,
        "type": {
          "name": "string"
        },
        "deprecated": false
      },
      "onBlur": {
        "name": "onBlur",
        "required": false,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "onChange": {
        "name": "onChange",
        "required": false,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "onFocus": {
        "name": "onFocus",
        "required": false,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "required": {
        "name": "required",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "deprecated": false
      },
      "selectedValue": {
        "name": "selectedValue",
        "required": false,
        "type": {
          "name": "string"
        },
        "deprecated": false
      }
    }
  },
  {
    "name": "RadioGroupProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "comment": {
      "tags": [
        {
          "tag": "children",
          "text": "required\n"
        }
      ]
    },
    "id": "RadioGroupProps",
    "tags": {
      "children": "required"
    },
    "properties": {
      "children": {
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        },
        "description": "The content of the component",
        "deprecated": false
      },
      "containerStyle": {
        "name": "containerStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the component container element",
        "deprecated": false
      },
      "errorMessage": {
        "name": "errorMessage",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        },
        "description": "Content of the error message. If a value is provided, the radio buttons will be styled to show an error state",
        "deprecated": false
      },
      "helperMessage": {
        "name": "helperMessage",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        },
        "description": "Content of the helper message",
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "isTextVisuallyHidden": {
        "name": "isTextVisuallyHidden",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, label text for the radio group will be hidden visually, but will still be read by assistive technology",
        "defaultValue": "false",
        "deprecated": false
      },
      "labelStyle": {
        "name": "labelStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the label of the radio group",
        "deprecated": false
      },
      "labelText": {
        "name": "labelText",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        },
        "description": "Content of label of the radio group; can be node or string. Alternatively, the labelledById prop can be used",
        "deprecated": false
      },
      "labelledById": {
        "name": "labelledById",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "ID of the element that labels the radio group, used in the aria-labelledby attribute for the group. Alternatively, the labelText prop can be used",
        "deprecated": false
      },
      "name": {
        "name": "name",
        "required": true,
        "type": {
          "name": "string"
        },
        "description": "Name attribute the radio group",
        "deprecated": false
      },
      "onBlur": {
        "name": "onBlur",
        "required": false,
        "type": {
          "name": "function"
        },
        "description": "Action that fires when the radio group loses focus",
        "deprecated": false
      },
      "onChange": {
        "name": "onChange",
        "required": false,
        "type": {
          "name": "function"
        },
        "description": "Action that fires when selected value of the radio group changes",
        "deprecated": false
      },
      "onFocus": {
        "name": "onFocus",
        "required": false,
        "type": {
          "name": "function"
        },
        "description": "Action that fires when one of the radio buttons within the group receives focus",
        "deprecated": false
      },
      "required": {
        "name": "required",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the user must select one radio button for the form to be valid",
        "defaultValue": "false",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      },
      "value": {
        "name": "value",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Value of the radio button that is the default selected value for the group",
        "deprecated": false
      }
    }
  },
  {
    "name": "SearchProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "SearchProps",
    "tags": {},
    "properties": {
      "containerStyle": {
        "name": "containerStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the component container element",
        "deprecated": false
      },
      "iconAriaLabel": {
        "name": "iconAriaLabel",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Text for icon button aria-label",
        "defaultValue": "\"Search\"",
        "deprecated": false
      },
      "inputSize": {
        "name": "inputSize",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "InputSize.large",
            "InputSize.medium"
          ]
        },
        "description": "Relative size of the component",
        "defaultValue": "InputSize.medium",
        "deprecated": false
      },
      "inputStyle": {
        "name": "inputStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the input element",
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "isLoading": {
        "name": "isLoading",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will show a loading animation instead of a search button",
        "defaultValue": "false",
        "deprecated": false
      },
      "labelText": {
        "name": "labelText",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Text for input aria-label",
        "defaultValue": "\"Search\"",
        "deprecated": false
      },
      "onSearch": {
        "name": "onSearch",
        "required": true,
        "type": {
          "name": "function"
        },
        "description": "Action that will fire when search icon button is clicked",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      },
      "value": {
        "name": "value",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Value of the input element",
        "deprecated": false
      }
    }
  },
  {
    "name": "ItemsListProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {},
    "typeParameter": [
      {
        "id": 7000,
        "name": "T",
        "kind": 131072,
        "kindString": "Type parameter",
        "flags": {}
      }
    ],
    "id": "ItemsListProps",
    "tags": {},
    "properties": {
      "customComponents": {
        "name": "customComponents",
        "required": false,
        "type": {
          "name": "SelectComponents"
        },
        "deprecated": false
      },
      "getItemProps": {
        "name": "getItemProps",
        "required": true,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "getMenuProps": {
        "name": "getMenuProps",
        "required": true,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "highlightedIndex": {
        "name": "highlightedIndex",
        "required": false,
        "type": {
          "name": "number"
        },
        "deprecated": false
      },
      "isOpen": {
        "name": "isOpen",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "deprecated": false
      },
      "itemToString": {
        "name": "itemToString",
        "required": true,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "items": {
        "name": "items",
        "required": true,
        "type": {
          "name": "Generic[]"
        },
        "deprecated": false
      },
      "maxHeight": {
        "name": "maxHeight",
        "required": false,
        "type": {
          "name": "number | string"
        },
        "deprecated": false
      },
      "menuStyle": {
        "name": "menuStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "deprecated": false
      }
    }
  },
  {
    "name": "SelectContainerInterface",
    "kind": 256,
    "kindString": "Interface",
    "flags": {},
    "typeParameter": [
      {
        "id": 7305,
        "name": "T",
        "kind": 131072,
        "kindString": "Type parameter",
        "flags": {}
      }
    ],
    "id": "SelectContainerInterface",
    "tags": {},
    "properties": {
      "children": {
        "name": "children",
        "required": true,
        "type": {
          "name": "React.ReactNode[]"
        },
        "description": "The content of the component",
        "deprecated": false
      },
      "containerStyle": {
        "name": "containerStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "deprecated": false
      },
      "getLabelProps": {
        "name": "getLabelProps",
        "required": true,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "hasError": {
        "name": "hasError",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "isLabelVisuallyHidden": {
        "name": "isLabelVisuallyHidden",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "deprecated": false
      },
      "labelStyle": {
        "name": "labelStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "deprecated": false
      },
      "labelText": {
        "name": "labelText",
        "required": true,
        "type": {
          "name": "string"
        },
        "deprecated": false
      }
    }
  },
  {
    "name": "SelectTriggerButtonInterface",
    "kind": 256,
    "kindString": "Interface",
    "flags": {},
    "typeParameter": [
      {
        "id": 7324,
        "name": "T",
        "kind": 131072,
        "kindString": "Type parameter",
        "flags": {}
      }
    ],
    "id": "SelectTriggerButtonInterface",
    "tags": {},
    "properties": {
      "ariaDescribedBy": {
        "name": "ariaDescribedBy",
        "required": false,
        "type": {
          "name": "string"
        },
        "deprecated": false
      },
      "children": {
        "name": "children",
        "required": true,
        "type": {
          "name": "React.ReactNode | "
        },
        "description": "The content of the component",
        "deprecated": false
      },
      "customComponents": {
        "name": "customComponents",
        "required": false,
        "type": {
          "name": "SelectComponents"
        },
        "deprecated": false
      },
      "disabled": {
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "deprecated": false
      },
      "hasError": {
        "name": "hasError",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "style": {
        "name": "style",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "deprecated": false
      },
      "tabindex": {
        "name": "tabindex",
        "required": false,
        "type": {
          "name": "number"
        },
        "deprecated": false
      },
      "toggleButtonProps": {
        "name": "toggleButtonProps",
        "required": true,
        "type": {
          "name": "any"
        },
        "deprecated": false
      }
    }
  },
  {
    "name": "ItemRenderOptions",
    "kind": 4194304,
    "kindString": "Type alias",
    "flags": {
      "isExported": true
    },
    "typeParameter": [
      {
        "id": 6955,
        "name": "T",
        "kind": 131072,
        "kindString": "Type parameter",
        "flags": {
          "isExported": true
        }
      }
    ],
    "type": {
      "type": "reflection",
      "declaration": {
        "id": 6956,
        "name": "__type",
        "kind": 65536,
        "kindString": "Type literal",
        "flags": {
          "isExported": true
        },
        "indexSignature": [
          {
            "id": 6963,
            "name": "__index",
            "kind": 8192,
            "kindString": "Index signature",
            "flags": {
              "isExported": true
            },
            "parameters": [
              {
                "id": 6964,
                "name": "key",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExported": true
                },
                "type": {
                  "type": "intrinsic",
                  "name": "string"
                }
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "any"
            }
          }
        ],
        "children": [
          {
            "id": 6958,
            "name": "isFocused",
            "kind": 32,
            "kindString": "Variable",
            "flags": {
              "isExported": true,
              "isOptional": true
            },
            "sources": [
              {
                "fileName": "packages/react-magma-dom/src/components/Select/components.tsx",
                "line": 10,
                "character": 11
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "boolean"
            }
          },
          {
            "id": 6959,
            "name": "item",
            "kind": 32,
            "kindString": "Variable",
            "flags": {
              "isExported": true
            },
            "sources": [
              {
                "fileName": "packages/react-magma-dom/src/components/Select/components.tsx",
                "line": 11,
                "character": 6
              }
            ],
            "type": {
              "type": "typeParameter",
              "name": "T"
            }
          },
          {
            "id": 6960,
            "name": "itemRef",
            "kind": 32,
            "kindString": "Variable",
            "flags": {
              "isExported": true
            },
            "sources": [
              {
                "fileName": "packages/react-magma-dom/src/components/Select/components.tsx",
                "line": 12,
                "character": 9
              }
            ],
            "type": {
              "type": "reference",
              "typeArguments": [
                {
                  "type": "reference",
                  "name": "HTMLLIElement"
                }
              ],
              "name": "React.Ref"
            }
          },
          {
            "id": 6961,
            "name": "itemString",
            "kind": 32,
            "kindString": "Variable",
            "flags": {
              "isExported": true
            },
            "sources": [
              {
                "fileName": "packages/react-magma-dom/src/components/Select/components.tsx",
                "line": 13,
                "character": 12
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "string"
            }
          },
          {
            "id": 6957,
            "name": "key",
            "kind": 32,
            "kindString": "Variable",
            "flags": {
              "isExported": true
            },
            "sources": [
              {
                "fileName": "packages/react-magma-dom/src/components/Select/components.tsx",
                "line": 9,
                "character": 5
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "string"
            }
          },
          {
            "id": 6962,
            "name": "theme",
            "kind": 32,
            "kindString": "Variable",
            "flags": {
              "isExported": true
            },
            "sources": [
              {
                "fileName": "packages/react-magma-dom/src/components/Select/components.tsx",
                "line": 14,
                "character": 7
              }
            ],
            "type": {
              "type": "reference",
              "name": "ThemeInterface"
            }
          }
        ],
        "groups": [
          {
            "title": "Variables",
            "kind": 32,
            "children": [
              6958,
              6959,
              6960,
              6961,
              6957,
              6962
            ]
          }
        ],
        "sources": [
          {
            "fileName": "packages/react-magma-dom/src/components/Select/components.tsx",
            "line": 8,
            "character": 34
          }
        ]
      }
    },
    "id": "ItemRenderOptions",
    "tags": {},
    "properties": {}
  },
  {
    "name": "SelectComponents",
    "kind": 4194304,
    "kindString": "Type alias",
    "flags": {
      "isExported": true
    },
    "typeParameter": [
      {
        "id": 6966,
        "name": "T",
        "kind": 131072,
        "kindString": "Type parameter",
        "flags": {
          "isExported": true
        }
      }
    ],
    "type": {
      "type": "reflection",
      "declaration": {
        "id": 6967,
        "name": "__type",
        "kind": 65536,
        "kindString": "Type literal",
        "flags": {
          "isExported": true
        },
        "children": [
          {
            "id": 6968,
            "name": "ClearIndicator",
            "kind": 32,
            "kindString": "Variable",
            "flags": {
              "isExported": true,
              "isOptional": true
            },
            "sources": [
              {
                "fileName": "packages/react-magma-dom/src/components/Select/components.tsx",
                "line": 19,
                "character": 16
              }
            ],
            "type": {
              "type": "reference",
              "typeArguments": [
                {
                  "type": "reference",
                  "id": 929,
                  "name": "IconButtonProps"
                }
              ],
              "name": "FunctionComponent"
            }
          },
          {
            "id": 6969,
            "name": "DropdownIndicator",
            "kind": 32,
            "kindString": "Variable",
            "flags": {
              "isExported": true,
              "isOptional": true
            },
            "sources": [
              {
                "fileName": "packages/react-magma-dom/src/components/Select/components.tsx",
                "line": 20,
                "character": 19
              }
            ],
            "type": {
              "type": "reference",
              "typeArguments": [
                {
                  "type": "reference",
                  "typeArguments": [
                    {
                      "type": "reference",
                      "name": "IconProps"
                    }
                  ],
                  "name": "Partial"
                }
              ],
              "name": "FunctionComponent"
            }
          },
          {
            "id": 6971,
            "name": "Item",
            "kind": 32,
            "kindString": "Variable",
            "flags": {
              "isExported": true,
              "isOptional": true
            },
            "sources": [
              {
                "fileName": "packages/react-magma-dom/src/components/Select/components.tsx",
                "line": 22,
                "character": 6
              }
            ],
            "type": {
              "type": "reference",
              "typeArguments": [
                {
                  "type": "reference",
                  "id": 6954,
                  "typeArguments": [
                    {
                      "type": "typeParameter",
                      "name": "T"
                    }
                  ],
                  "name": "ItemRenderOptions"
                }
              ],
              "name": "FunctionComponent"
            }
          },
          {
            "id": 6970,
            "name": "LoadingIndicator",
            "kind": 32,
            "kindString": "Variable",
            "flags": {
              "isExported": true,
              "isOptional": true
            },
            "sources": [
              {
                "fileName": "packages/react-magma-dom/src/components/Select/components.tsx",
                "line": 21,
                "character": 18
              }
            ],
            "type": {
              "type": "reference",
              "typeArguments": [
                {
                  "type": "reference",
                  "id": 6691,
                  "name": "SpinnerProps"
                }
              ],
              "name": "FunctionComponent"
            }
          }
        ],
        "groups": [
          {
            "title": "Variables",
            "kind": 32,
            "children": [
              6968,
              6969,
              6971,
              6970
            ]
          }
        ],
        "sources": [
          {
            "fileName": "packages/react-magma-dom/src/components/Select/components.tsx",
            "line": 18,
            "character": 33
          }
        ]
      }
    },
    "id": "SelectComponents",
    "tags": {},
    "properties": {}
  },
  {
    "name": "InternalMultiProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "typeParameter": [
      {
        "id": 7374,
        "name": "T",
        "kind": 131072,
        "kindString": "Type parameter",
        "flags": {
          "isExported": true
        }
      }
    ],
    "id": "InternalMultiProps",
    "tags": {},
    "properties": {
      "onRemoveSelectedItem": {
        "name": "onRemoveSelectedItem",
        "required": false,
        "type": {
          "name": "function"
        },
        "description": "Event that fires when the clear button is clicked on a multi-selected item",
        "deprecated": false
      }
    }
  },
  {
    "name": "InternalSelectProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "typeParameter": [
      {
        "id": 7355,
        "name": "T",
        "kind": 131072,
        "kindString": "Type parameter",
        "flags": {
          "isExported": true
        }
      }
    ],
    "id": "InternalSelectProps",
    "tags": {},
    "properties": {
      "components": {
        "name": "components",
        "required": false,
        "type": {
          "name": "SelectComponents"
        },
        "description": "This complex object includes all the compositional components that are used. If you wish to overwrite a component, pass in a component to the appropriate namespace",
        "deprecated": false
      },
      "containerStyle": {
        "name": "containerStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the component container",
        "deprecated": false
      },
      "disabled": {
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, item will be disabled; it will appear dimmed and events will not fire",
        "defaultValue": "false",
        "deprecated": false
      },
      "errorMessage": {
        "name": "errorMessage",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        },
        "description": "Content of the error message. If a value is provided, the component will be styled to show an error state",
        "deprecated": false
      },
      "helperMessage": {
        "name": "helperMessage",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        },
        "description": "Content of the helper message",
        "deprecated": false
      },
      "inputStyle": {
        "name": "inputStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the select trigger or combobox input",
        "deprecated": false
      },
      "isClearable": {
        "name": "isClearable",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component include a button for clearing the field",
        "defaultValue": "false",
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "isLabelVisuallyHidden": {
        "name": "isLabelVisuallyHidden",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, label text will be hidden visually, but will still be read by assistive technology",
        "defaultValue": "false",
        "deprecated": false
      },
      "isMulti": {
        "name": "isMulti",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, multiple items may be selected",
        "defaultValue": "false",
        "deprecated": false
      },
      "itemListMaxHeight": {
        "name": "itemListMaxHeight",
        "required": false,
        "type": {
          "name": "number | string"
        },
        "description": "Max-height for the item menu list ul element",
        "deprecated": false
      },
      "labelStyle": {
        "name": "labelStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the label",
        "deprecated": false
      },
      "labelText": {
        "name": "labelText",
        "required": true,
        "type": {
          "name": "string"
        },
        "description": "Text for label",
        "deprecated": false
      },
      "menuStyle": {
        "name": "menuStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the items menu",
        "deprecated": false
      },
      "messageStyle": {
        "name": "messageStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the helper or error message",
        "deprecated": false
      },
      "placeholder": {
        "name": "placeholder",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Text for select trigger button or combobox input placeholder",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      }
    }
  },
  {
    "name": "MultiSelectProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "typeParameter": [
      {
        "id": 7480,
        "name": "T",
        "kind": 131072,
        "kindString": "Type parameter",
        "flags": {
          "isExported": true
        },
        "type": {
          "type": "reference",
          "id": 7522,
          "name": "SelectOptions"
        }
      }
    ],
    "id": "MultiSelectProps",
    "tags": {},
    "properties": {
      "activeIndex": {
        "name": "activeIndex",
        "required": false,
        "type": {
          "name": "number"
        },
        "deprecated": false
      },
      "defaultActiveIndex": {
        "name": "defaultActiveIndex",
        "required": false,
        "type": {
          "name": "number"
        },
        "deprecated": false
      },
      "defaultSelectedItems": {
        "name": "defaultSelectedItems",
        "required": false,
        "type": {
          "name": "Generic[]"
        },
        "deprecated": false
      },
      "environment": {
        "name": "environment",
        "required": false,
        "type": {
          "name": "Environment"
        },
        "deprecated": false
      },
      "getA11yRemovalMessage": {
        "name": "getA11yRemovalMessage",
        "required": false,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "initialActiveIndex": {
        "name": "initialActiveIndex",
        "required": false,
        "type": {
          "name": "number"
        },
        "deprecated": false
      },
      "initialSelectedItems": {
        "name": "initialSelectedItems",
        "required": false,
        "type": {
          "name": "Generic[]"
        },
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "itemToString": {
        "name": "itemToString",
        "required": false,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "keyNavigationNext": {
        "name": "keyNavigationNext",
        "required": false,
        "type": {
          "name": "string"
        },
        "deprecated": false
      },
      "keyNavigationPrevious": {
        "name": "keyNavigationPrevious",
        "required": false,
        "type": {
          "name": "string"
        },
        "deprecated": false
      },
      "onActiveIndexChange": {
        "name": "onActiveIndexChange",
        "required": false,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "onRemoveSelectedItem": {
        "name": "onRemoveSelectedItem",
        "required": false,
        "type": {
          "name": "function"
        },
        "description": "Event that fires when the clear button is clicked on a multi-selected item",
        "deprecated": false
      },
      "onSelectedItemsChange": {
        "name": "onSelectedItemsChange",
        "required": false,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "onStateChange": {
        "name": "onStateChange",
        "required": false,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "selectedItems": {
        "name": "selectedItems",
        "required": false,
        "type": {
          "name": "Generic[]"
        },
        "deprecated": false
      },
      "stateReducer": {
        "name": "stateReducer",
        "required": false,
        "type": {
          "name": "function"
        },
        "deprecated": false
      }
    }
  },
  {
    "name": "SelectProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "typeParameter": [
      {
        "id": 7380,
        "name": "T",
        "kind": 131072,
        "kindString": "Type parameter",
        "flags": {
          "isExported": true
        },
        "type": {
          "type": "reference",
          "id": 7522,
          "name": "SelectOptions"
        }
      }
    ],
    "id": "SelectProps",
    "tags": {},
    "properties": {
      "ariaDescribedBy": {
        "name": "ariaDescribedBy",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Id of the element that describes the select trigger button",
        "deprecated": false
      },
      "circularNavigation": {
        "name": "circularNavigation",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "deprecated": false
      },
      "components": {
        "name": "components",
        "required": false,
        "type": {
          "name": "SelectComponents"
        },
        "description": "This complex object includes all the compositional components that are used. If you wish to overwrite a component, pass in a component to the appropriate namespace",
        "deprecated": false
      },
      "containerStyle": {
        "name": "containerStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the component container",
        "deprecated": false
      },
      "defaultHighlightedIndex": {
        "name": "defaultHighlightedIndex",
        "required": false,
        "type": {
          "name": "number"
        },
        "deprecated": false
      },
      "defaultIsOpen": {
        "name": "defaultIsOpen",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "deprecated": false
      },
      "defaultSelectedItem": {
        "name": "defaultSelectedItem",
        "required": false,
        "type": {
          "name": "Generic"
        },
        "deprecated": false
      },
      "disabled": {
        "name": "disabled",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, item will be disabled; it will appear dimmed and events will not fire",
        "defaultValue": "false",
        "deprecated": false
      },
      "environment": {
        "name": "environment",
        "required": false,
        "type": {
          "name": "Environment"
        },
        "deprecated": false
      },
      "errorMessage": {
        "name": "errorMessage",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        },
        "description": "Content of the error message. If a value is provided, the component will be styled to show an error state",
        "deprecated": false
      },
      "getA11ySelectionMessage": {
        "name": "getA11ySelectionMessage",
        "required": false,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "getA11yStatusMessage": {
        "name": "getA11yStatusMessage",
        "required": false,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "getItemId": {
        "name": "getItemId",
        "required": false,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "helperMessage": {
        "name": "helperMessage",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        },
        "description": "Content of the helper message",
        "deprecated": false
      },
      "highlightedIndex": {
        "name": "highlightedIndex",
        "required": false,
        "type": {
          "name": "number"
        },
        "deprecated": false
      },
      "id": {
        "name": "id",
        "required": false,
        "type": {
          "name": "string"
        },
        "deprecated": false
      },
      "initialHighlightedIndex": {
        "name": "initialHighlightedIndex",
        "required": false,
        "type": {
          "name": "number"
        },
        "deprecated": false
      },
      "initialIsOpen": {
        "name": "initialIsOpen",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "deprecated": false
      },
      "initialSelectedItem": {
        "name": "initialSelectedItem",
        "required": false,
        "type": {
          "name": "Generic"
        },
        "deprecated": false
      },
      "innerRef": {
        "name": "innerRef",
        "required": false,
        "type": {
          "name": "React.Ref"
        },
        "description": "Reference to the trigger button element in the select",
        "deprecated": false
      },
      "inputStyle": {
        "name": "inputStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the select trigger or combobox input",
        "deprecated": false
      },
      "isClearable": {
        "name": "isClearable",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component include a button for clearing the field",
        "defaultValue": "false",
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "isLabelVisuallyHidden": {
        "name": "isLabelVisuallyHidden",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, label text will be hidden visually, but will still be read by assistive technology",
        "defaultValue": "false",
        "deprecated": false
      },
      "isMulti": {
        "name": "isMulti",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, multiple items may be selected",
        "defaultValue": "false",
        "deprecated": false
      },
      "isOpen": {
        "name": "isOpen",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "deprecated": false
      },
      "itemListMaxHeight": {
        "name": "itemListMaxHeight",
        "required": false,
        "type": {
          "name": "number | string"
        },
        "description": "Max-height for the item menu list ul element",
        "deprecated": false
      },
      "itemToString": {
        "name": "itemToString",
        "required": false,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "items": {
        "name": "items",
        "required": true,
        "type": {
          "name": "Generic[]"
        },
        "deprecated": false
      },
      "labelId": {
        "name": "labelId",
        "required": false,
        "type": {
          "name": "string"
        },
        "deprecated": false
      },
      "labelStyle": {
        "name": "labelStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the label",
        "deprecated": false
      },
      "labelText": {
        "name": "labelText",
        "required": true,
        "type": {
          "name": "string"
        },
        "description": "Text for label",
        "deprecated": false
      },
      "menuId": {
        "name": "menuId",
        "required": false,
        "type": {
          "name": "string"
        },
        "deprecated": false
      },
      "menuStyle": {
        "name": "menuStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the items menu",
        "deprecated": false
      },
      "messageStyle": {
        "name": "messageStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the helper or error message",
        "deprecated": false
      },
      "onBlur": {
        "name": "onBlur",
        "required": false,
        "type": {
          "name": "function"
        },
        "description": "Event that fires when the trigger button loses focus",
        "deprecated": false
      },
      "onFocus": {
        "name": "onFocus",
        "required": false,
        "type": {
          "name": "function"
        },
        "description": "Event that fires when the trigger button gains focus",
        "deprecated": false
      },
      "onHighlightedIndexChange": {
        "name": "onHighlightedIndexChange",
        "required": false,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "onIsOpenChange": {
        "name": "onIsOpenChange",
        "required": false,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "onKeyDown": {
        "name": "onKeyDown",
        "required": false,
        "type": {
          "name": "function"
        },
        "description": "Event that fires when the trigger button receives keypress",
        "deprecated": false
      },
      "onKeyPress": {
        "name": "onKeyPress",
        "required": false,
        "type": {
          "name": "function"
        },
        "description": "Event that will fire when a character is typed while focused on the trigger button",
        "deprecated": false
      },
      "onKeyUp": {
        "name": "onKeyUp",
        "required": false,
        "type": {
          "name": "function"
        },
        "description": "Event that will fire when a keypress is released while focused on the trigger button",
        "deprecated": false
      },
      "onSelectedItemChange": {
        "name": "onSelectedItemChange",
        "required": false,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "onStateChange": {
        "name": "onStateChange",
        "required": false,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "placeholder": {
        "name": "placeholder",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Text for select trigger button or combobox input placeholder",
        "deprecated": false
      },
      "scrollIntoView": {
        "name": "scrollIntoView",
        "required": false,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "selectedItem": {
        "name": "selectedItem",
        "required": false,
        "type": {
          "name": "Generic"
        },
        "deprecated": false
      },
      "stateReducer": {
        "name": "stateReducer",
        "required": false,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      },
      "toggleButtonId": {
        "name": "toggleButtonId",
        "required": false,
        "type": {
          "name": "string"
        },
        "deprecated": false
      }
    }
  },
  {
    "name": "SelectOptions",
    "kind": 4194304,
    "kindString": "Type alias",
    "flags": {
      "isExported": true
    },
    "type": {
      "type": "union",
      "types": [
        {
          "type": "intrinsic",
          "name": "string"
        },
        {
          "type": "reflection",
          "declaration": {
            "id": 7523,
            "name": "__type",
            "kind": 65536,
            "kindString": "Type literal",
            "flags": {
              "isExported": true
            },
            "indexSignature": [
              {
                "id": 7526,
                "name": "__index",
                "kind": 8192,
                "kindString": "Index signature",
                "flags": {
                  "isExported": true
                },
                "parameters": [
                  {
                    "id": 7527,
                    "name": "key",
                    "kind": 32768,
                    "kindString": "Parameter",
                    "flags": {
                      "isExported": true
                    },
                    "type": {
                      "type": "intrinsic",
                      "name": "string"
                    }
                  }
                ],
                "type": {
                  "type": "intrinsic",
                  "name": "any"
                }
              }
            ],
            "children": [
              {
                "id": 7525,
                "name": "label",
                "kind": 32,
                "kindString": "Variable",
                "flags": {
                  "isExported": true
                },
                "sources": [
                  {
                    "fileName": "packages/react-magma-dom/src/components/Select/index.tsx",
                    "line": 17,
                    "character": 26
                  }
                ],
                "type": {
                  "type": "intrinsic",
                  "name": "string"
                }
              },
              {
                "id": 7524,
                "name": "value",
                "kind": 32,
                "kindString": "Variable",
                "flags": {
                  "isExported": true
                },
                "sources": [
                  {
                    "fileName": "packages/react-magma-dom/src/components/Select/index.tsx",
                    "line": 17,
                    "character": 11
                  }
                ],
                "type": {
                  "type": "intrinsic",
                  "name": "string"
                }
              }
            ],
            "groups": [
              {
                "title": "Variables",
                "kind": 32,
                "children": [
                  7525,
                  7524
                ]
              }
            ],
            "sources": [
              {
                "fileName": "packages/react-magma-dom/src/components/Select/index.tsx",
                "line": 17,
                "character": 3
              }
            ]
          }
        },
        {
          "type": "intrinsic",
          "name": "any"
        }
      ]
    },
    "id": "SelectOptions",
    "tags": {},
    "properties": {}
  },
  {
    "name": "ContainerProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "ContainerProps",
    "tags": {},
    "properties": {
      "children": {
        "name": "children",
        "required": false,
        "type": {
          "name": "any"
        },
        "description": "The content of the component",
        "deprecated": false
      },
      "style": {
        "name": "style",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "deprecated": false
      }
    }
  },
  {
    "name": "StyledLabelProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "StyledLabelProps",
    "tags": {},
    "properties": {
      "children": {
        "name": "children",
        "required": false,
        "type": {
          "name": "any"
        },
        "description": "The content of the component",
        "deprecated": false
      },
      "htmlFor": {
        "name": "htmlFor",
        "required": true,
        "type": {
          "name": "string"
        },
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "style": {
        "name": "style",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "deprecated": false
      }
    }
  },
  {
    "name": "SkipLinkProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "SkipLinkProps",
    "tags": {},
    "properties": {
      "buttonText": {
        "name": "buttonText",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "The text in the skip link",
        "defaultValue": "\"Skip Navigation\"",
        "deprecated": false
      },
      "children": {
        "name": "children",
        "required": true,
        "type": {
          "name": "React.ReactNode"
        },
        "description": "The content of the component",
        "deprecated": false
      },
      "color": {
        "name": "color",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "ButtonColor.danger",
            "ButtonColor.marketing",
            "ButtonColor.primary",
            "ButtonColor.secondary",
            "ButtonColor.success"
          ]
        },
        "description": "The color of the button, indicating its function in the UI",
        "defaultValue": "ButtonColor.primary",
        "deprecated": false
      },
      "isFullWidth": {
        "name": "isFullWidth",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": " Set the button to display full-width.",
        "defaultValue": "false",
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "positionLeft": {
        "name": "positionLeft",
        "required": false,
        "type": {
          "name": "number"
        },
        "description": "Number of pixels from the left of the screen for the skip link to be positioned",
        "defaultValue": "10",
        "deprecated": false
      },
      "positionTop": {
        "name": "positionTop",
        "required": false,
        "type": {
          "name": "number"
        },
        "description": "Number of pixels from the top of the screen for the skip link to be positioned",
        "defaultValue": "10",
        "deprecated": false
      },
      "shape": {
        "name": "shape",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "ButtonShape.fill",
            "ButtonShape.leftCap",
            "ButtonShape.rightCap",
            "ButtonShape.round"
          ]
        },
        "description": "Defines the border radius",
        "defaultValue": "ButtonShape.fill",
        "deprecated": false
      },
      "size": {
        "name": "size",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "ButtonSize.large",
            "ButtonSize.medium",
            "ButtonSize.small"
          ]
        },
        "description": "The relative size of the button",
        "defaultValue": "ButtonSize.medium",
        "deprecated": false
      },
      "styledAs": {
        "name": "styledAs",
        "required": false,
        "type": {
          "name": " | "
        },
        "description": "How the hyperlink is styled (can look like either a plain link or a button)",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      },
      "textTransform": {
        "name": "textTransform",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "ButtonTextTransform.none",
            "ButtonTextTransform.uppercase"
          ]
        },
        "description": "Determines whether the button appears in all-caps",
        "defaultValue": "ButtonTextTransform.uppercase",
        "deprecated": false
      },
      "to": {
        "name": "to",
        "required": true,
        "type": {
          "name": "string"
        },
        "description": "The href value of the link",
        "deprecated": false
      },
      "variant": {
        "name": "variant",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "ButtonVariant.link",
            "ButtonVariant.outline",
            "ButtonVariant.solid"
          ]
        },
        "description": "The variant of the button",
        "defaultValue": "ButtonVariant.solid",
        "deprecated": false
      }
    }
  },
  {
    "name": "SkipLinkContentProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "comment": {
      "tags": [
        {
          "tag": "children",
          "text": "required\n"
        }
      ]
    },
    "id": "SkipLinkContentProps",
    "tags": {
      "children": "required"
    },
    "properties": {
      "children": {
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        },
        "description": "The content of the component",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      }
    }
  },
  {
    "name": "SpinnerProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "SpinnerProps",
    "tags": {},
    "properties": {
      "color": {
        "name": "color",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "The color of the spinner border",
        "defaultValue": "\"#006298\"",
        "deprecated": false
      },
      "size": {
        "name": "size",
        "required": false,
        "type": {
          "name": "string | number"
        },
        "description": "The height and width of the spinner.  Can be a string or number; if number is provided, the size is in px.",
        "defaultValue": "16",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      }
    }
  },
  {
    "name": "StyledButtonProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {},
    "id": "StyledButtonProps",
    "tags": {},
    "properties": {
      "href": {
        "name": "href",
        "required": false,
        "type": {
          "name": "string"
        },
        "deprecated": false
      },
      "iconOnly": {
        "name": "iconOnly",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "deprecated": false
      },
      "isFullWidth": {
        "name": "isFullWidth",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": " Set the button to display full-width.",
        "defaultValue": "false",
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "shape": {
        "name": "shape",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "ButtonShape.fill",
            "ButtonShape.leftCap",
            "ButtonShape.rightCap",
            "ButtonShape.round"
          ]
        },
        "description": "Defines the border radius",
        "defaultValue": "ButtonShape.fill",
        "deprecated": false
      },
      "size": {
        "name": "size",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "ButtonSize.large",
            "ButtonSize.medium",
            "ButtonSize.small"
          ]
        },
        "description": "The relative size of the button",
        "defaultValue": "ButtonSize.medium",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      },
      "textTransform": {
        "name": "textTransform",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "ButtonTextTransform.none",
            "ButtonTextTransform.uppercase"
          ]
        },
        "description": "Determines whether the button appears in all-caps",
        "defaultValue": "ButtonTextTransform.uppercase",
        "deprecated": false
      },
      "type": {
        "name": "type",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "ButtonType.button",
            "ButtonType.reset",
            "ButtonType.submit"
          ]
        },
        "description": "The type attribute of the button\nButtonType.button",
        "deprecated": false
      },
      "variant": {
        "name": "variant",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "ButtonVariant.link",
            "ButtonVariant.outline",
            "ButtonVariant.solid"
          ]
        },
        "description": "The variant of the button",
        "defaultValue": "ButtonVariant.solid",
        "deprecated": false
      }
    }
  },
  {
    "name": "TableBodyProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "comment": {
      "tags": [
        {
          "tag": "children",
          "text": "required\n"
        }
      ]
    },
    "id": "TableBodyProps",
    "tags": {
      "children": "required"
    },
    "properties": {
      "children": {
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        },
        "description": "The content of the component",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      }
    }
  },
  {
    "name": "TableCellProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "TableCellProps",
    "tags": {},
    "properties": {
      "align": {
        "name": "align",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "TableCellAlign.center",
            "TableCellAlign.inherit",
            "TableCellAlign.justify",
            "TableCellAlign.left",
            "TableCellAlign.right"
          ]
        },
        "description": "Text alignment of the cell content. Right alignment should be used for numeric values",
        "defaultValue": "TableCellAlign.left",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      },
      "width": {
        "name": "width",
        "required": false,
        "type": {
          "name": "string | number"
        },
        "description": "Width of the component, set by CSS",
        "defaultValue": "auto",
        "deprecated": false
      }
    }
  },
  {
    "name": "TableHeadProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "comment": {
      "tags": [
        {
          "tag": "children",
          "text": "required\n"
        }
      ]
    },
    "id": "TableHeadProps",
    "tags": {
      "children": "required"
    },
    "properties": {
      "children": {
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        },
        "description": "The content of the component",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      }
    }
  },
  {
    "name": "TableHeaderCellProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "TableHeaderCellProps",
    "tags": {},
    "properties": {
      "align": {
        "name": "align",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "TableCellAlign.center",
            "TableCellAlign.inherit",
            "TableCellAlign.justify",
            "TableCellAlign.left",
            "TableCellAlign.right"
          ]
        },
        "description": "Text alignment of the cell content. Right alignment should be used for numeric values",
        "defaultValue": "TableCellAlign.left",
        "deprecated": false
      },
      "isSortable": {
        "name": "isSortable",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the header will render a button for sorting",
        "deprecated": false
      },
      "onSort": {
        "name": "onSort",
        "required": false,
        "type": {
          "name": "function"
        },
        "description": "Event that fires when clicking the table header cell sort button",
        "deprecated": false
      },
      "scope": {
        "name": "scope",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "TableHeaderCellScope.col",
            "TableHeaderCellScope.colgroup",
            "TableHeaderCellScope.row",
            "TableHeaderCellScope.rowgroup"
          ]
        },
        "description": "Direction and range of data cells that are covered by the header cell",
        "defaultValue": "TableHeaderCellScope.col",
        "deprecated": false
      },
      "sortDirection": {
        "name": "sortDirection",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "TableSortDirection.ascending",
            "TableSortDirection.descending",
            "TableSortDirection.none"
          ]
        },
        "description": "Direction by which the column is sorted",
        "defaultValue": "TableSortDirection.none",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      },
      "width": {
        "name": "width",
        "required": false,
        "type": {
          "name": "string | number"
        },
        "description": "Width of the component, set by CSS",
        "defaultValue": "auto",
        "deprecated": false
      }
    }
  },
  {
    "name": "TableRowProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "comment": {
      "tags": [
        {
          "tag": "children",
          "text": "required\n"
        }
      ]
    },
    "id": "TableRowProps",
    "tags": {
      "children": "required"
    },
    "properties": {
      "children": {
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        },
        "description": "The content of the component",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      }
    }
  },
  {
    "name": "TableContextInterface",
    "kind": 256,
    "kindString": "Interface",
    "flags": {},
    "id": "TableContextInterface",
    "tags": {},
    "properties": {
      "density": {
        "name": "density",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "TableDensity.compact",
            "TableDensity.loose",
            "TableDensity.normal"
          ]
        },
        "deprecated": false
      },
      "hasHoverStyles": {
        "name": "hasHoverStyles",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "deprecated": false
      },
      "hasVerticalBorders": {
        "name": "hasVerticalBorders",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "deprecated": false
      },
      "hasZebraStripes": {
        "name": "hasZebraStripes",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      }
    }
  },
  {
    "name": "TableProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "comment": {
      "tags": [
        {
          "tag": "children",
          "text": "required\n"
        }
      ]
    },
    "id": "TableProps",
    "tags": {
      "children": "required"
    },
    "properties": {
      "children": {
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        },
        "description": "The content of the component",
        "deprecated": false
      },
      "density": {
        "name": "density",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "TableDensity.compact",
            "TableDensity.loose",
            "TableDensity.normal"
          ]
        },
        "description": "Relative padding of the table cells",
        "defaultValue": "TableDensity.normal",
        "deprecated": false
      },
      "hasHoverStyles": {
        "name": "hasHoverStyles",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, row will be visually highlighted on hover",
        "deprecated": false
      },
      "hasVerticalBorders": {
        "name": "hasVerticalBorders",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, columns will have vertical borders",
        "deprecated": false
      },
      "hasZebraStripes": {
        "name": "hasZebraStripes",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, every other row will have a background color",
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "minWidth": {
        "name": "minWidth",
        "required": false,
        "type": {
          "name": "number"
        },
        "description": "Minimum width for the table in pixels",
        "defaultValue": "600",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      }
    }
  },
  {
    "name": "TabProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "TabProps",
    "tags": {},
    "properties": {
      "icon": {
        "name": "icon",
        "required": false,
        "type": {
          "name": "ReactElement | "
        },
        "description": "Icon to display within the component",
        "deprecated": false
      },
      "isActive": {
        "name": "isActive",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will display with the active/selected state",
        "defaultValue": "false",
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      }
    }
  },
  {
    "name": "TabPanelProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "TabPanelProps",
    "tags": {},
    "properties": {
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      }
    }
  },
  {
    "name": "TabPanelContainerProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {},
    "id": "TabPanelContainerProps",
    "tags": {},
    "properties": {
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      }
    }
  },
  {
    "name": "TabsContainerContextInterface",
    "kind": 256,
    "kindString": "Interface",
    "flags": {},
    "id": "TabsContainerContextInterface",
    "tags": {},
    "properties": {
      "activeTabIndex": {
        "name": "activeTabIndex",
        "required": true,
        "type": {
          "name": "number"
        },
        "deprecated": false
      },
      "isInverseContainer": {
        "name": "isInverseContainer",
        "required": true,
        "type": {
          "name": "boolean"
        },
        "deprecated": false
      },
      "setActiveTabIndex": {
        "name": "setActiveTabIndex",
        "required": true,
        "type": {
          "name": "React.Dispatch"
        },
        "deprecated": false
      }
    }
  },
  {
    "name": "TabsContainerProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {},
    "id": "TabsContainerProps",
    "tags": {},
    "properties": {
      "activeIndex": {
        "name": "activeIndex",
        "required": false,
        "type": {
          "name": "number"
        },
        "description": "The index of the current active tab. You can use this for managing state of the tabs component by your custom logic.",
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      }
    }
  },
  {
    "name": "ScrollButtonProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "ScrollButtonProps",
    "tags": {},
    "properties": {
      "backgroundColor": {
        "name": "backgroundColor",
        "required": false,
        "type": {
          "name": "string"
        },
        "deprecated": false
      },
      "buttonVisible": {
        "name": "buttonVisible",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "orientation": {
        "name": "orientation",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "TabsOrientation.horizontal",
            "TabsOrientation.vertical"
          ]
        },
        "deprecated": false
      },
      "theme": {
        "name": "theme",
        "required": false,
        "type": {
          "name": "ThemeInterface"
        },
        "deprecated": false
      }
    }
  },
  {
    "name": "HorizontalTabsProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "HorizontalTabsProps",
    "tags": {},
    "properties": {
      "borderPosition": {
        "name": "borderPosition",
        "required": false,
        "type": {
          "name": "bottom | top"
        },
        "deprecated": false
      },
      "orientation": {
        "name": "orientation",
        "required": false,
        "type": {
          "name": "horizontal"
        },
        "deprecated": false
      }
    }
  },
  {
    "name": "TabsContextInterface",
    "kind": 256,
    "kindString": "Interface",
    "flags": {},
    "id": "TabsContextInterface",
    "tags": {},
    "properties": {
      "borderPosition": {
        "name": "borderPosition",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "TabsBorderPosition.bottom",
            "TabsBorderPosition.left",
            "TabsBorderPosition.right",
            "TabsBorderPosition.top"
          ]
        },
        "deprecated": false
      },
      "buttonRefArray": {
        "name": "buttonRefArray",
        "required": false,
        "type": {
          "name": "MutableRefObject"
        },
        "deprecated": false
      },
      "changeHandler": {
        "name": "changeHandler",
        "required": true,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "iconPosition": {
        "name": "iconPosition",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "TabsIconPosition.bottom",
            "TabsIconPosition.left",
            "TabsIconPosition.right",
            "TabsIconPosition.top"
          ]
        },
        "deprecated": false
      },
      "isFullWidth": {
        "name": "isFullWidth",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "orientation": {
        "name": "orientation",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "TabsOrientation.horizontal",
            "TabsOrientation.vertical"
          ]
        },
        "deprecated": false
      },
      "registerTabButton": {
        "name": "registerTabButton",
        "required": true,
        "type": {
          "name": "function"
        },
        "deprecated": false
      }
    }
  },
  {
    "name": "TabsProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "TabsProps",
    "tags": {},
    "properties": {
      "alignment": {
        "name": "alignment",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "TabsAlignment.center",
            "TabsAlignment.left",
            "TabsAlignment.right"
          ]
        },
        "description": "Alignment of the tabs menu",
        "defaultValue": "TabsAlignment.left",
        "deprecated": false
      },
      "aria-label": {
        "name": "aria-label",
        "required": true,
        "type": {
          "name": "string"
        },
        "description": "The text the screen reader will announce that describes your tablist.",
        "deprecated": false
      },
      "backgroundColor": {
        "name": "backgroundColor",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Background color for the tabs menu",
        "deprecated": false
      },
      "iconPosition": {
        "name": "iconPosition",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "TabsIconPosition.bottom",
            "TabsIconPosition.left",
            "TabsIconPosition.right",
            "TabsIconPosition.top"
          ]
        },
        "description": "The orientation of icon on Tab",
        "deprecated": false
      },
      "isFullWidth": {
        "name": "isFullWidth",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the components takes the full width of the screen",
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "onChange": {
        "name": "onChange",
        "required": false,
        "type": {
          "name": "function"
        },
        "description": "The onChange handler for managing state of Tabs component by your custom logic.",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      }
    }
  },
  {
    "name": "VerticalTabsProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "VerticalTabsProps",
    "tags": {},
    "properties": {
      "borderPosition": {
        "name": "borderPosition",
        "required": false,
        "type": {
          "name": "left | right"
        },
        "deprecated": false
      },
      "orientation": {
        "name": "orientation",
        "required": false,
        "type": {
          "name": "vertical"
        },
        "deprecated": false
      }
    }
  },
  {
    "name": "Orientation",
    "kind": 4194304,
    "kindString": "Type alias",
    "flags": {
      "isExported": true
    },
    "type": {
      "type": "union",
      "types": [
        {
          "type": "reference",
          "id": 11480,
          "name": "HorizontalTabsProps"
        },
        {
          "type": "reference",
          "id": 11477,
          "name": "VerticalTabsProps"
        }
      ]
    },
    "id": "Orientation",
    "tags": {},
    "properties": {}
  },
  {
    "name": "TextareaProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "TextareaProps",
    "tags": {},
    "properties": {
      "containerStyle": {
        "name": "containerStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the component container element",
        "deprecated": false
      },
      "errorMessage": {
        "name": "errorMessage",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        },
        "description": "Content of the error message. If a value is provided, the input will be styled as an error state, and the error message will display.",
        "deprecated": false
      },
      "helperMessage": {
        "name": "helperMessage",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        },
        "description": "Content of the helper message",
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "isLabelVisuallyHidden": {
        "name": "isLabelVisuallyHidden",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, label text will be hidden visually, but will still be read by assistive technology",
        "defaultValue": "false",
        "deprecated": false
      },
      "labelStyle": {
        "name": "labelStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the label element",
        "deprecated": false
      },
      "labelText": {
        "name": "labelText",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        },
        "description": "Content for label; can be a node or a string",
        "deprecated": false
      },
      "messageStyle": {
        "name": "messageStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the helper or error message",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      },
      "textareaStyle": {
        "name": "textareaStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the textarea element",
        "deprecated": false
      },
      "value": {
        "name": "value",
        "required": false,
        "type": {
          "name": "string | ReadonlyArray | number"
        },
        "description": "Value for the textarea",
        "deprecated": false
      }
    }
  },
  {
    "name": "AmPmToggleProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {},
    "id": "AmPmToggleProps",
    "tags": {},
    "properties": {
      "children": {
        "name": "children",
        "required": true,
        "type": {
          "name": "string"
        },
        "description": "The content of the component",
        "deprecated": false
      }
    }
  },
  {
    "name": "TimePickerProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "TimePickerProps",
    "tags": {},
    "properties": {
      "containerStyle": {
        "name": "containerStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the outer container",
        "deprecated": false
      },
      "errorMessage": {
        "name": "errorMessage",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        },
        "description": "Content of the error message. If a value is provided, the component will be styled to show an error state.",
        "deprecated": false
      },
      "helperMessage": {
        "name": "helperMessage",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        },
        "description": "Content of the helper message",
        "deprecated": false
      },
      "inputStyle": {
        "name": "inputStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the outer input",
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "labelStyle": {
        "name": "labelStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the label",
        "deprecated": false
      },
      "labelText": {
        "name": "labelText",
        "required": true,
        "type": {
          "name": "React.ReactNode"
        },
        "description": "Content for label; can be a node or a string",
        "deprecated": false
      },
      "messageStyle": {
        "name": "messageStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the helper or error message",
        "deprecated": false
      },
      "minutesStep": {
        "name": "minutesStep",
        "required": false,
        "type": {
          "name": "number"
        },
        "description": "The stepping interval for the minutes input",
        "deprecated": false
      },
      "onChange": {
        "name": "onChange",
        "required": false,
        "type": {
          "name": "function"
        },
        "description": "Function called when the component is changed to a new time",
        "deprecated": false
      },
      "value": {
        "name": "value",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Full time value passed in and converted to use in hour, minute, and AM/PM fields",
        "deprecated": false
      }
    }
  },
  {
    "name": "ToastsContainerProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "ToastsContainerProps",
    "tags": {},
    "properties": {
      "bottomOffset": {
        "name": "bottomOffset",
        "required": false,
        "type": {
          "name": "number"
        },
        "description": "Number of additional pixels from bottom of screen",
        "defaultValue": "0",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      }
    }
  },
  {
    "name": "ToastsContextInterface",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "ToastsContextInterface",
    "tags": {},
    "properties": {
      "bottomOffset": {
        "name": "bottomOffset",
        "required": false,
        "type": {
          "name": "number"
        },
        "deprecated": false
      },
      "toastsArray": {
        "name": "toastsArray",
        "required": false,
        "type": {
          "name": "any"
        },
        "deprecated": false
      }
    }
  },
  {
    "name": "ToastProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "comment": {
      "tags": [
        {
          "tag": "children",
          "text": "required\n"
        }
      ]
    },
    "id": "ToastProps",
    "tags": {
      "children": "required"
    },
    "properties": {
      "alertStyle": {
        "name": "alertStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "CSS properties for the alert component within the toast container",
        "deprecated": false
      },
      "children": {
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        },
        "description": "The content of the component",
        "deprecated": false
      },
      "closeAriaLabel": {
        "name": "closeAriaLabel",
        "required": false,
        "type": {
          "name": "string"
        },
        "deprecated": false
      },
      "containerStyle": {
        "name": "containerStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "CSS properties for the component container",
        "deprecated": false
      },
      "disableAutoDismiss": {
        "name": "disableAutoDismiss",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will persist until dismissed by the user",
        "defaultValue": "false",
        "deprecated": false
      },
      "forceDismiss": {
        "name": "forceDismiss",
        "required": false,
        "type": {
          "name": "function"
        },
        "deprecated": false
      },
      "hasTimerRing": {
        "name": "hasTimerRing",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "deprecated": false
      },
      "isDismissed": {
        "name": "isDismissed",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "deprecated": false
      },
      "isDismissible": {
        "name": "isDismissible",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "deprecated": false
      },
      "isExiting": {
        "name": "isExiting",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "isPaused": {
        "name": "isPaused",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "deprecated": false
      },
      "isToast": {
        "name": "isToast",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "deprecated": false
      },
      "onDismiss": {
        "name": "onDismiss",
        "required": true,
        "type": {
          "name": "function"
        },
        "description": "Action that fires when the close button is clicked (required when dismissible is true)",
        "deprecated": false
      },
      "onMouseEnter": {
        "name": "onMouseEnter",
        "required": false,
        "type": {
          "name": "function"
        },
        "description": "Action that fires when the mouse enters the component",
        "deprecated": false
      },
      "onMouseLeave": {
        "name": "onMouseLeave",
        "required": false,
        "type": {
          "name": "function"
        },
        "description": "Action that fires when the mouse leaves the component",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      },
      "toastDuration": {
        "name": "toastDuration",
        "required": false,
        "type": {
          "name": "number"
        },
        "description": "Number of milliseconds the toast displays before it closes",
        "defaultValue": "5000",
        "deprecated": false
      },
      "variant": {
        "name": "variant",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "AlertVariant.danger",
            "AlertVariant.info",
            "AlertVariant.success",
            "AlertVariant.warning"
          ]
        },
        "deprecated": false
      }
    }
  },
  {
    "name": "ToggleProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "ToggleProps",
    "tags": {},
    "properties": {
      "containerStyle": {
        "name": "containerStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the component container element",
        "deprecated": false
      },
      "errorMessage": {
        "name": "errorMessage",
        "required": false,
        "type": {
          "name": "React.ReactNode"
        },
        "description": "Content of the error message for toggle. If a value is provided, the component will be styled as an error state and the error message will display.",
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "isTextVisuallyHidden": {
        "name": "isTextVisuallyHidden",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, label text will be hidden visually, but will still be read by assistive technology",
        "defaultValue": "false",
        "deprecated": false
      },
      "labelStyle": {
        "name": "labelStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the label element",
        "deprecated": false
      },
      "labelText": {
        "name": "labelText",
        "required": true,
        "type": {
          "name": "React.ReactNode"
        },
        "description": "Content for label; can be a node or a string",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      },
      "textPosition": {
        "name": "textPosition",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "ToggleTextPosition.left",
            "ToggleTextPosition.right"
          ]
        },
        "description": "Whether the label appears to the left of the right of the toggle switch",
        "defaultValue": "ToggleTextPosition.left",
        "deprecated": false
      },
      "thumbStyle": {
        "name": "thumbStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the part of the component that slides back and forth on the track",
        "deprecated": false
      },
      "trackStyle": {
        "name": "trackStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for track on which the toggle thumb slides",
        "deprecated": false
      }
    }
  },
  {
    "name": "ITooltipState",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "ITooltipState",
    "tags": {},
    "properties": {
      "id": {
        "name": "id",
        "required": false,
        "type": {
          "name": "string"
        },
        "deprecated": false
      },
      "isVisible": {
        "name": "isVisible",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "deprecated": false
      }
    }
  },
  {
    "name": "TooltipProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "TooltipProps",
    "tags": {},
    "properties": {
      "arrowStyle": {
        "name": "arrowStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the arrow element",
        "deprecated": false
      },
      "children": {
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactElement"
        },
        "description": "The element that triggers the tooltip when it is hovered or focused. Must be a react element (not a string) and should be a focusable element to meet a11y requirements",
        "deprecated": false
      },
      "containerStyle": {
        "name": "containerStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the component container element which includes both the tooltip trigger and the tooltip popover content",
        "deprecated": false
      },
      "content": {
        "name": "content",
        "required": true,
        "type": {
          "name": "React.ReactNode"
        },
        "description": "The content of the tooltip",
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "position": {
        "name": "position",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "EnumTooltipPosition.bottom",
            "EnumTooltipPosition.left",
            "EnumTooltipPosition.right",
            "EnumTooltipPosition.top"
          ]
        },
        "description": "Position the tooltip appears in relation to its trigger",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      },
      "tooltipStyle": {
        "name": "tooltipStyle",
        "required": false,
        "type": {
          "name": "CSSProperties"
        },
        "description": "Style properties for the inner tooltip content",
        "deprecated": false
      }
    }
  },
  {
    "name": "TypographyProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "id": "TypographyProps",
    "tags": {},
    "properties": {
      "as": {
        "name": "as",
        "required": false,
        "type": {
          "name": "string"
        },
        "deprecated": false
      },
      "children": {
        "name": "children",
        "required": false,
        "type": {
          "name": "any"
        },
        "description": "The content of the component",
        "deprecated": false
      },
      "color": {
        "name": "color",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "TypographyColor.danger",
            "TypographyColor.default",
            "TypographyColor.subdued",
            "TypographyColor.success"
          ]
        },
        "deprecated": false
      },
      "contextVariant": {
        "name": "contextVariant",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "TypographyContextVariant.default",
            "TypographyContextVariant.expressive",
            "TypographyContextVariant.narrative"
          ]
        },
        "deprecated": false
      },
      "element": {
        "name": "element",
        "required": false,
        "type": {
          "name": "string"
        },
        "deprecated": false
      },
      "isInverse": {
        "name": "isInverse",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "description": "If true, the component will have inverse styling to better appear on a dark background",
        "defaultValue": "false",
        "deprecated": false
      },
      "noMargins": {
        "name": "noMargins",
        "required": false,
        "type": {
          "name": "boolean"
        },
        "deprecated": false
      },
      "ref": {
        "name": "ref",
        "required": false,
        "type": {
          "name": "any"
        },
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      },
      "theme": {
        "name": "theme",
        "required": false,
        "type": {
          "name": "any"
        },
        "deprecated": false
      },
      "visualStyle": {
        "name": "visualStyle",
        "required": false,
        "type": {
          "name": "enum",
          "options": [
            "TypographyVisualStyle.bodyLarge",
            "TypographyVisualStyle.bodyMedium",
            "TypographyVisualStyle.bodySmall",
            "TypographyVisualStyle.bodyXSmall",
            "TypographyVisualStyle.heading2XSmall",
            "TypographyVisualStyle.headingLarge",
            "TypographyVisualStyle.headingMedium",
            "TypographyVisualStyle.headingSmall",
            "TypographyVisualStyle.headingXLarge",
            "TypographyVisualStyle.headingXSmall"
          ]
        },
        "deprecated": false
      }
    }
  },
  {
    "name": "VisuallyHiddenProps",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExported": true
    },
    "comment": {
      "tags": [
        {
          "tag": "children",
          "text": "required\n"
        }
      ]
    },
    "id": "VisuallyHiddenProps",
    "tags": {
      "children": "required"
    },
    "properties": {
      "children": {
        "name": "children",
        "required": true,
        "type": {
          "name": "ReactNode"
        },
        "description": "The content of the component",
        "deprecated": false
      },
      "testId": {
        "name": "testId",
        "required": false,
        "type": {
          "name": "string"
        },
        "description": "Test ID attached to an internal element as `data-testid` for consumer testing",
        "deprecated": false
      }
    }
  }
]