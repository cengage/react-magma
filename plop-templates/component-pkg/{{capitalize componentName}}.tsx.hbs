import * as React from 'react';
import styled from '../../theme/styled';

{{#if useTheme}}
import { ThemeContext } from '../../theme/ThemeContext';
import { ThemeInterface } from '../../theme/magma';
{{/if}}
{{#if useInverse}}
import { InverseContext, useIsInverse } from '../../inverse';
{{/if}}
{{#if useI18n}}
import { I18nContext } from '../../i18n';
{{/if}}

/**
* @children required
*/
export interface {{capitalize componentName}}Props extends React.HTMLAttributes<HTMLDivElement>{
  testId?: string;
  {{#if useInverse}}
  isInverse?: boolean;
  {{/if}}
  {{#if useTheme}}
  /**
  * @internal
  */
  theme?: ThemeInterface;
  {{/if}}
}

const Styled{{capitalize componentName}} = styled.div<{{capitalize componentName}}Props>`
  {{#if useTheme}}
  {{#if useInverse}}
  background: ${props =>
  props.isInverse
  ? props.theme.colors.foundation
  : props.theme.colors.neutral08};
  color: ${props =>
  props.isInverse
  ? props.theme.colors.neutral08
  : props.theme.colors.neutral};
  {{else}}
  background: ${props => props.theme.colors.neutral08};
  color: ${props => props.theme.colors.neutral};
  {{/if}}
  {{/if}}
`;

export const {{capitalize componentName}} = React.forwardRef<HTMLDivElement, {{capitalize componentName}}Props>(
  (props, ref) => {
    const {children, testId, {{#if useInverse}}isInverse: isInverseProp, {{/if}} ...rest} = props;
    {{#if useTheme}}
    const theme = React.useContext(ThemeContext);
    {{/if}}
    {{#if useInverse}}
    const isInverse = useIsInverse(isInverseProp);
    {{/if}}
    {{#if useI18n}}
    const i18n = React.useContext(I18nContext);
    {{/if}}

    return ({{#if useInverse}}<InverseContext.Provider value=\{{ isInverse, }}>{{/if}}
      <Styled{{capitalize componentName}}
      {{#if useTheme}} theme={theme} {{/if}}
      {{#if useInverse}} isInverse={isInverse}{{/if}}
      ref={ref}
      data-testid={props.testId}
      {...rest} >
        {children}
        {{#if useI18n}}<div><pre>{i18n.example}</pre></div>{{/if}}
      </Styled{{capitalize componentName}}>
    {{#if useInverse}}</InverseContext.Provider>{{/if}});
  }
)